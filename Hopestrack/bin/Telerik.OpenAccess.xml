<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Telerik.OpenAccess</name>
  </assembly>
  <members>
    <member name="T:Telerik.OpenAccess.Diagnostics.ITraceEvent">
      <summary>
            Interface for events generated by log tracing.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.Name">
      <summary>
            Gets the name of the event.
            </summary>
      <value>Event name</value>
    </member>
    <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.Description">
      <summary>
            Gets the description of the event.
            </summary>
      <value>Event description</value>
    </member>
    <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.EventType">
      <summary>
            Gets the internal numerical representation of the event type.
            </summary>
      <value>Numerical value discriminating the type of the event</value>
    </member>
    <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.EventId">
      <summary>
            Gets the event instance identification.
            </summary>
      <value>Numerical value for identification purposes</value>
    </member>
    <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.ConnectionId">
      <summary>
            Gets the identification of the physical connection.
            </summary>
      <value>Connection discriminator value</value>
    </member>
    <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.StatementId">
      <summary>
            Gets the database statement identification.
            </summary>
      <value>Statement discriminator value</value>
    </member>
    <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.ResultId">
      <summary>
            Gets the database result set identification.
            </summary>
      <value>Result set discriminator value</value>
    </member>
    <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.DatabaseId">
      <summary>
            Gets the database identification.
            </summary>
      <value>Database id</value>
    </member>
    <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.TransactionId">
      <summary>
            Gets the database transaction identification.
            </summary>
      <value>Transaction identifier</value>
    </member>
    <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.ErrorMessage">
      <summary>
            Gets the error message.
            </summary>
      <value>Error message</value>
    </member>
    <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.Caller">
      <summary>
            Gets an identification for the calling client.
            </summary>
      <value>Calling client discriminator</value>
    </member>
    <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.FetchGroup">
      <summary>
            Gets the name of the fetch group used.
            </summary>
      <value>Fetch Group name</value>
    </member>
    <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.FieldName">
      <summary>
            Gets the name of the field causing lazy loading or modification.
            </summary>
      <value>Field name</value>
    </member>
    <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.Query">
      <summary>
            Gets the actual query string.
            </summary>
      <value>Query expression</value>
    </member>
    <member name="T:Telerik.OpenAccess.Diagnostics.TraceAdapter">
      <summary>
            Handler for all trace and debugging messages
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Diagnostics.TraceAdapter.Instance">
      <summary>
            The instance used by all trace and debugging output.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Diagnostics.TraceAdapter.TraceError">
      <summary>
            Indicates whether error trace messages will be generated. 
            </summary>
      <returns>
        <c>True</c> when error trace messages are beeing generated, <c>False</c> otherwise.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Diagnostics.TraceAdapter.TraceError(System.String,System.Object[])">
      <summary>
            Writes an error trace message.
            </summary>
      <param name="msg">The format string.</param>
      <param name="o">An array of parameters or <c>null</c>.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Diagnostics.TraceAdapter.TraceWarning">
      <summary>
            Indicates whether error or warning trace messages will be generated. 
            </summary>
      <returns>
        <c>True</c> when warning trace messages are beeing generated, <c>False</c> otherwise.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Diagnostics.TraceAdapter.TraceWarning(System.String,System.Object[])">
      <summary>
            Writes a warning trace message.
            </summary>
      <param name="msg">The format string.</param>
      <param name="o">An array of parameters or <c>null</c>.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Diagnostics.TraceAdapter.TraceInformation">
      <summary>
            Indicates whether error, warning or information trace messages will be generated. 
            </summary>
      <returns>
        <c>True</c> when information trace messages are beeing generated, <c>False</c> otherwise.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Diagnostics.TraceAdapter.TraceInformation(System.String,System.Object[])">
      <summary>
            Writes an information trace message.
            </summary>
      <param name="msg">The format string.</param>
      <param name="o">An array of parameters or <c>null</c>.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Diagnostics.TraceAdapter.TraceVerbose">
      <summary>
            Indicates whether error, warning, information or verbose trace messages will be generated. 
            </summary>
      <returns>
        <c>True</c> when verbose trace messages are beeing generated, <c>False</c> otherwise.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Diagnostics.TraceAdapter.TraceVerbose(System.String,System.Object[])">
      <summary>
            Writes a verbose or debug trace message.
            </summary>
      <param name="msg">The format string.</param>
      <param name="o">An array of parameters or <c>null</c>.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Diagnostics.TraceAdapter.Trace(System.Int32,Telerik.OpenAccess.Diagnostics.ITraceEvent)">
      <summary>
            Writes an internal trace event message.
            </summary>
      <param name="ev">The trace event to write. Must not be null.</param>
      <param name="lvl">The level (1=error,2=warning,3=info,4=verbose) of th event to write.</param>
    </member>
    <member name="P:Telerik.OpenAccess.Diagnostics.TraceAdapter.Level">
      <summary>
            Controls the amount of trace messages beeing generated.
            </summary>
      <value>
            String value representing either the numerical value or one of the values
            'Off', 'Error' (here equal to 'Critical'), 'Warning', 'Information', 'Verbose'.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.Diagnostics.TraceAdapter.Tracing">
      <summary>
            Indicates whether any trace message will be generated.
            </summary>
      <value>
        <c>True</c> when trace messages are beeing generated, <c>False</c> otherwise.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.Diagnostics.TraceAdapter.Listeners">
      <summary>
            Gets the collection of listeners that is monitoring the trace output.
            </summary>
      <value>
            A TraceListenerCollection that represents a collection of type TraceListener monitoring this trace output.
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.LicensingException">
      <summary>
            The exception that is thrown when a required database license 
            is not available.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.OpenAccessException">
      <summary>
            The base class of all Telerik.OpenAccess .NET specific exceptions.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessException.#ctor(System.String)">
      <summary>
            Creates an instance with a given message; not intended for 
            application use.
            </summary>
      <param name="msg">The message for this exception.</param>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessException.#ctor(System.String,System.Boolean)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessException.#ctor(System.String,Telerik.OpenAccess.OpenAccessException.Failure)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessException.#ctor(System.String,Telerik.OpenAccess.Exceptions.IBackendError,Telerik.OpenAccess.OpenAccessException.Failure)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessException.#ctor(System.String,System.Exception,Telerik.OpenAccess.OpenAccessException.Failure)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessException.#ctor(System.String,System.Exception[],Telerik.OpenAccess.OpenAccessException.Failure)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessException.setFailed(Telerik.OpenAccess.IObjectId)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessException.setNative(Telerik.OpenAccess.Exceptions.IBackendError)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessException.setCanRetry(System.Boolean)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implemenation.
            </summary>
      <param name="info">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessException.ToString">
      <summary>
            Creates and returns a string representation of the current exception.
            </summary>
      <returns>A string representation of the current exception.</returns>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessException.InnerExceptions">
      <summary>
            Gets the exception(s) causing this exception to be thrown.
            </summary>
      <value>
            Array with causing exceptions, possibly of size 1 or <c>null</c>.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessException.FailedObject">
      <summary>
            Gets the object ID of the object causing this exception.
            </summary>
      <value>
            The representation of the object causing this exception or null
            if the object ID was not available.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessException.BackendError">
      <summary>
            Gets the database backend-specific error.
            </summary>
      <value>
            Database-backend specific error object.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessException.Reason">
      <summary>
            Gets the concrete error code for this exception.
            </summary>
      <value>
            The exact cause for this exception.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessException.CanRetry">
      <summary>
            Indicates whether this exception is caused by a temporal problem.
            </summary>
      <value>
        <c>True</c> if the application can try again and might succeed.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessException.HelpLink">
      <summary>
            Gets a link to the help file associated with this exception.
            </summary>
      <value>
            The Uniform Resource Name (URN) or Uniform Resource Locator (URL).
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.OpenAccessException.Failure">
      <summary>
            Fine-grained database error codes.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.Runtime">
      <summary>
            General runtime error; see exception message and BackendError.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.Parse">
      <summary>
            File parsing failure.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.Unsupported">
      <summary>
            Unsupported option, operation or type.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.InvalidOperation">
      <summary>
            Operation is not possible in the current state/context.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.TransactionConflict">
      <summary>
            Object network uses more than one ObjectScope/Transaction.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.DetachedObject">
      <summary>
            The object cannot be loaded because it is detached.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.ObjectNotEnhanced">
      <summary>
            The type of the object was not enhanced.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.ObjectNotPersistent">
      <summary>
            The object is not persistent in the database.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.DatabaseIsClosed">
      <summary>
            The database is not open.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.NoSuchObject">
      <summary>
            The object is already deleted.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.InvalidObjectId">
      <summary>
            The object ID is not correct.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.DuplicateKey">
      <summary>
            An attempt was made to insert a duplicate key.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.CannotConvertObject">
      <summary>
            An object could not be converted from the 
            database format.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.DatabaseNotFound">
      <summary>
            The database was not found.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.DatabaseNotAccessible">
      <summary>
            The database was found, but is not accessible.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.ObjectNotAccessible">
      <summary>
            The object cannot be accessed; the object is 
            locked or the database
            is not opened for writing.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.ObjectLocked">
      <summary>
            The object is locked by another transaction.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.ClassLocked">
      <summary>
            The type of the object is locked by another 
            transaction.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.OptimisticVerification">
      <summary>
            The object was modified by another transaction
             in the meantime.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.Internal">
      <summary>
             An internal error has occurred.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.LicensingNotValid">
      <summary>
            The license is not valid.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.TransactionActive">
      <summary>
            The transaction is already running.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.TransactionNesting">
      <summary>
            Attempt to use nested transaction, where 
            it is not supported.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.TransactionFailed">
      <summary>
            The transaction failed; possibly caused be 
            transaction validator.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.TransactionNotActive">
      <summary>
            The transaction is not active (not running).
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.HostnameUnresolvable">
      <summary>
            The Host name is incorrect.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.LicensingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.LicensingException.#ctor(System.String,System.Exception,Telerik.OpenAccess.OpenAccessException.Failure)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.AuthorizationException">
      <summary>
            The exception that is thrown when database access cannot be 
            granted due to a database authorization failure.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.AuthorizationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.AuthorizationException.#ctor(System.String,System.Exception,Telerik.OpenAccess.OpenAccessException.Failure)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.ObjectNotAccessibleException">
      <summary>
            The exception that is thrown when a persServiceNotificationistent object cannot be
            accessed by the current user due to database access rights management.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.ObjectNotAccessibleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.CommunicationException">
      <summary>
            The exception that is thrown when a communication failure with
            the database occures.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.CommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.CommunicationException.#ctor(System.String,System.Exception,Telerik.OpenAccess.OpenAccessException.Failure)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.DataStoreException">
      <summary>
            The exception that is thrown when a database storage failure
            occurs.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.DataStoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.DataStoreException.#ctor(System.String,System.Exception)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.DataStoreException.#ctor(System.String,Telerik.OpenAccess.OpenAccessException.Failure)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.DataStoreException.#ctor(System.String,System.Exception,Telerik.OpenAccess.OpenAccessException.Failure)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.DatabaseNotFoundException">
      <summary>
            The exception that is thrown when the database storage 
            could not be found.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.DatabaseNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.DatabaseNotFoundException.#ctor(System.String,System.Exception,Telerik.OpenAccess.Exceptions.IBackendError)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.TransactionException">
      <summary>
            The exception that is thrown when a database transaction
            method fails.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.TransactionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.TransactionException.#ctor(System.String,System.Exception,Telerik.OpenAccess.OpenAccessException.Failure)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.TransactionFailedException">
      <summary>
            The exception that is thrown when a database transaction
            fails.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.TransactionFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.TransactionFailedException.#ctor(System.String,System.Exception,Telerik.OpenAccess.Exceptions.IBackendError)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
      <summary>
            The exception that is thrown when no active transaction
            was given for a database method requiring one.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.TransactionNotActiveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.TransactionNotActiveException.#ctor">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.TransactionNotActiveException.#ctor(System.String)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.PersistenceException">
      <summary>
            The exception that is thrown when an object is not persistent.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.PersistenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.PersistenceException.#ctor(System.String,Telerik.OpenAccess.OpenAccessException.Failure)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
      <summary>
            The exception that is thrown when a persistence-capable object
            was required but an instance of an unenhanced class was given.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException.#ctor(System.String)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException.#ctor(System.Object)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.ObjectNotPersistentException">
      <summary>
            The exception that is thrown when a persistent object was
            required but a transient instance was given.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.ObjectNotPersistentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.ObjectNotPersistentException.#ctor(System.String)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.NoSuchObjectException">
      <summary>
            The exception that is thrown when an persistent object
            could not be retrieved from the database.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.NoSuchObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.NoSuchObjectException.#ctor(System.String,System.Exception)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.NoSuchObjectException.#ctor(Telerik.OpenAccess.Exceptions.IBackendError)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.ObjectConversionException">
      <summary>
            The exception that is thrown when a database object could not
            be accessed because an object conversion was required and failed.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.ObjectConversionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.ObjectConversionException.#ctor(System.String,Telerik.OpenAccess.Exceptions.IBackendError)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.ConcurrencyControlException">
      <summary>
            Base exception for concurrency control failures.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.ConcurrencyControlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.LockNotGrantedException">
      <summary>
            The exception that is thrown when a lock on a persistent object
            was not granted by the database.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.LockNotGrantedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.LockNotGrantedException.#ctor(System.String,System.Boolean)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.OptimisticVerificationException">
      <summary>
            The exception that is thrown when a persistent object was stored
            concurrently.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.OptimisticVerificationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.OptimisticVerificationException.#ctor(System.String,System.Exception[])">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.OptimisticVerificationException.#ctor(System.String)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.OptimisticVerificationException.ConflictingObject(System.Int32)">
      <summary>
            Returns the object ID of one database object causing this optimistic
            verification exception.
            </summary>
      <param name="index">The index of the sub-conflict.</param>
      <returns>The object ID of the object causing the 
            respective sub-conflict.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.OptimisticVerificationException.Conflict(System.Int32)">
      <summary>
            Returns a sub-exception which caused this optimistic 
            verification exception.
            </summary>
      <param name="index">The index of the sub-conflict.</param>
      <returns> The OpenAccessException from the respective sub-conflict.</returns>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.OptimisticVerificationException.NumberOfConflicts">
      <summary>
            	Gets the number of sub-conflicts causing this exception.
            	</summary>
      <value>The number of sub-conflicts causing this exception.</value>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.DatabaseNotOpenedException">
      <summary>
            The exception that is thrown when an opened database was not provided.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.DatabaseNotOpenedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.DatabaseNotOpenedException.#ctor(System.String)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.DatabaseNotOpenedException.#ctor(System.String,System.Exception)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.InvalidObjectIdException">
      <summary>
            The exception that is thrown when an invalid object ID was used.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.InvalidObjectIdException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.InvalidObjectIdException.#ctor(System.String)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.ParseException">
      <summary>
            The exception that is thrown when a runtime configuration
            file could not be successfully parsed.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.ParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.ParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implemenation.
            </summary>
      <param name="info">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.ParseException.#ctor(System.String,System.String,System.Int32)">
      <summary>SPI</summary>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.ParseException.Location">
      <summary>
            Gets the name of the file that contains the error.
            </summary>
      <value>
            File name.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.ParseException.LineNumber">
      <summary>
            Gets the line number of the error.
            </summary>
      <value>
            Line number.
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.DuplicateKeyException">
      <summary>
            The exception that is thrown when an attempt was made to insert
            a duplicate value into an unique index. 
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.DuplicateKeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.DuplicateKeyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implemenation.
            </summary>
      <param name="info">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.DuplicateKeyException.#ctor(System.String,System.Object,System.String)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.DuplicateKeyException.#ctor(System.String,System.Object,System.String,System.Exception)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.UnsupportedException">
      <summary>
            The exception that is thrown when an operation or option
            is not supported by the database backend or current 
            configuration.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.UnsupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.UnsupportedException.#ctor(System.String)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.UnsupportedException.#ctor(System.String,System.Exception)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">
      <summary>
            The exception that is thrown when an operation is invalid
            in the current state of the database, transaction or object.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.InvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.InvalidOperationException.#ctor(System.String)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.InvalidOperationException.#ctor(System.String,System.Exception)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.QueryException">
      <summary>
            The exception that is thrown when a database query is
            not correct.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.QueryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.QueryException.#ctor(System.String,System.Exception,Telerik.OpenAccess.OpenAccessException.Failure)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.ConfigurationException">
      <summary>
            The exception that is thrown when a configuration error occures.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.ConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.ConfigurationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implemenation.
            </summary>
      <param name="info">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.ConfigurationException.#ctor(System.String)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.ConfigurationException.#ctor(System.String,Telerik.OpenAccess.Exceptions.ConfigurationException.ConfigErrorType)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.ConfigurationException.#ctor(System.String,System.Exception,Telerik.OpenAccess.Exceptions.ConfigurationException.ConfigErrorType)">
      <summary>SPI</summary>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.ConfigurationException.ErrorOccurred">
      <summary>
            Gets the underlying ConfigErrorType for this configuration exception .
            </summary>
      <value>A ConfigurationException.ConfigErrorType value.</value>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.ConfigurationException.ConfigErrorType">
      <summary>
            Specifies the type of configuration exception that has occurred.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Exceptions.ConfigurationException.ConfigErrorType.ConfigSectionNotFound">
      <summary>
            The required section in the configuration was not found.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Exceptions.ConfigurationException.ConfigErrorType.ConnectionSectionWithSpecifiedIdMissing">
      <summary>
            The section given by ID was not found in the configuration.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Exceptions.ConfigurationException.ConfigErrorType.IncorrectDriverSpecified">
      <summary>
            The given driver name is not supported.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Exceptions.ConfigurationException.ConfigErrorType.ErrorParsingConfigFile">
      <summary>
            There was an error while parsing the config file.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Exceptions.ConfigurationException.ConfigErrorType.ConfigFileNotFound">
      <summary>
            The given configuration file was not found.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Exceptions.ConfigurationException.ConfigErrorType.ConfigFileNotAuthorized">
      <summary>
            The given configuration file is not accessible with the current rights.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.MetadataException">
      <summary>
            The exception that is thrown when a metadata compilation error occurs.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.MetadataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="info">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.MetadataException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implemenation.
            </summary>
      <param name="info">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.MetadataException.#ctor(System.Int32,System.String,System.Exception)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.MetadataException.#ctor(System.Int32,System.String)">
      <summary>SPI</summary>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.ErrorId">
      <summary>Gets an identifying error number for this exception.</summary>
      <value>Identifying error number</value>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.ClassName">
      <summary>
            Gets the class name where the error occured; if it is not a class it is a table.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.FieldName">
      <summary>
            Gets the field name where the error occured.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.TableName">
      <summary>
            Gets the table name where the error occured.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.ColumnName">
      <summary>
            Gets the column name where the error occured.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.AmbiguousValue">
      <summary>
            Gets the ambiguous value causing the error.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.DisambiguatedValue">
      <summary>
            Gets the disambiguated value fixing the error.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.FileName">
      <summary>
            Gets the file name where the error is caused.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.ProjectName">
      <summary>
            Gets the project name where the error is caused.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.IndexName">
      <summary>
            Gets the index name where the error is caused.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.ConstraintName">
      <summary>
            Gets the constraint name where the error is caused.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.ProcedureName">
      <summary>
            Gets the procedure name where the error is caused.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.PreviousDefiner">
      <summary>
            Gets the name of the existing definer of an ambiguous name.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.Context">
      <summary>
            Gets the context string
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.Usage">
      <summary>
            Gets the indicator whether key or value are meant
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.Column">
      <summary>
            Gets the column number.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.Line">
      <summary>
            Gets the line number.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.IsWarning">
      <summary>
            Indicates a warning.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.HelpKeyword">
      <summary>
            Gets the help keyword available with this error.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.Message">
      <summary>
            Gets the custom exception message.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.IBackendError">
      <summary>
            Description of a backend-specific error.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.IBackendError.Description">
      <summary>
            Gets the database backend-specific error description.
            </summary>
      <value>
            Error description provided by the backend.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.IBackendError.Number">
      <summary>
            Gets the database backend-specific error number.
            </summary>
      <value>
            The database backend-specific error number.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.IBackendError.ObjectId">
      <summary>
            Gets the object id of the object causing the backend error.
            </summary>
      <value>
            The object id of the object related with the error. 
            The value might be null.
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.Util.IFillerMethod">
      <summary>
            Interface for a method to calculates a collection of objects
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Util.IFillerMethod.Execute(Telerik.OpenAccess.IObjectScope)">
      <summary>
            Method to implement that provides an enumerable of persistent capable objects
            </summary>
      <param name="os">An IObjectScope with a started transaction.</param>
      <returns>IEumerable containing persistent capable objects</returns>
    </member>
    <member name="T:Telerik.OpenAccess.Util.IFillerObjectCollector">
      <summary>
            Interface for a method to determine the referenced object that has to be included
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Util.IFillerObjectCollector.GetCollector">
      <summary>
            Used to get an IObjectCollector implementation.
            </summary>
      <returns>An IObjectCollector implementation used to calculate reference objects to be 
            included</returns>
    </member>
    <member name="T:Telerik.OpenAccess.Util.FillInstruction">
      <summary>
            Instructions to get a ChangeSet that can be applied to an ObjectContainer.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Util.FillInstruction.Serialize(Telerik.OpenAccess.Util.FillInstruction)">
      <summary>
            Method to transform in a via ASP.NET transferable format
            </summary>
      <param name="fillInst">Object to serialize.</param>
      <returns>An object containing the serialized data.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Util.FillInstruction.Deserialize(Telerik.OpenAccess.Util.FillInstructionData)">
      <summary>
            Method to transform back from a via ASP.NET transferable format
            </summary>
      <param name="data">Object to deserialize.</param>
      <returns>A FillInstruction with the deserialized data.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Util.FillInstruction.#ctor(System.String,Telerik.OpenAccess.Util.IFillerMethod,Telerik.OpenAccess.Util.IFillerObjectCollector)">
      <summary>
            Constructs a FillInstruction.
            </summary>
      <param name="aName">A name for the set of resulting root objects.</param>
      <param name="aMethod">A method to get the root objects.</param>
      <param name="aCollector">An interface that provides the method to calculate the 
            referenced objects to include.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Util.FillInstruction.Execute(Telerik.OpenAccess.IObjectScope)">
      <summary>
            Executes the filler method and closure method and calculates a ChangeSet
            with the resulting root objects bound to name.
            </summary>
      <param name="os">An IObjectScope with a started transaction.</param>
      <returns>ChangeSet that can be applied to an ObjectContainer.</returns>
    </member>
    <member name="P:Telerik.OpenAccess.Util.FillInstruction.Name">
      <summary>
            Get the name of the method result.
            </summary>
      <value>The name for the result.</value>
    </member>
    <member name="T:Telerik.OpenAccess.Util.FillerMethodOQLQuery">
      <summary>
            IFillerMethod implementation that executes an OQL query
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Util.FillerMethodOQLQuery.#ctor(System.String)">
      <summary>
            Contructs a method object
            </summary>
      <param name="query">An OQL query string</param>
    </member>
    <member name="M:Telerik.OpenAccess.Util.FillerMethodOQLQuery.Execute(Telerik.OpenAccess.IObjectScope)">
      <summary>
            Execute the OQL query
            </summary>
      <param name="os">An IObjectScope with a started transaction.</param>
      <returns>The query result.</returns>
    </member>
    <member name="P:Telerik.OpenAccess.Util.FillerMethodOQLQuery.Oqlquery">
      <summary>Get the OQL query string.</summary>
      <value>The OQL query string.</value>
    </member>
    <member name="T:Telerik.OpenAccess.Util.FillInstructionData">
      <summary>
            Serializable FillInstruction used for data transfer within ASP.NET Webmethods.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Util.FillInstructionData.format">
      <summary>
            Compatibility information.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Util.FillInstructionData.fillData">
      <summary>
            The binary encoded fill instruction in byte form.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Util.FillInstructionData.reserved">
      <summary>
            Reserved for further use. 
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Util.FillInstructionData.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:Telerik.OpenAccess.Util.FillInstructionData.#ctor(System.Object)">
      <summary>
            Constructs an object and copies the corresponding field data of x
            </summary>
      <param name="x">An object of a from WSDL compiler generated FillInstructionData class</param>
    </member>
    <member name="M:Telerik.OpenAccess.Util.FillInstructionData.CopyTo(System.Object)">
      <summary>
            Copies the field data to the corresponding fields of object x.
            </summary>
      <param name="x">An object of a from WSDL compiler generated FillInstructionData class</param>
      <returns>The object x.</returns>
    </member>
    <member name="T:Telerik.OpenAccess.Util.IDBConnection">
      <summary>
            Interface for the IDBConnection classes
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Util.IDBConnection.Load(Telerik.OpenAccess.Util.FillInstructionData)">
      <summary>
            Load an ObjectContainer content
            </summary>
      <param name="data">Instruction to fill.</param>
      <returns>
            A serializable object containing the content.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Util.IDBConnection.Save(Telerik.OpenAccess.ObjectContainer.ChangeSet)">
      <summary>
            Save the changes made in an ObjectContainer.
            </summary>
      <param name="data">The changes.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Util.IDBConnection.Sync(Telerik.OpenAccess.ObjectContainer.ChangeSet)">
      <summary>
            Save the changes made in an ObjectContainer and updates the
            local container to work on.
            </summary>
      <param name="data">The changes.</param>
      <returns>Container update info.</returns>
    </member>
    <member name="T:Telerik.OpenAccess.Util.IObjectContainerProvider">
      <summary>
            Interface for the IObjectContainerProvider classes
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Util.IObjectContextProvider">
      <summary>
            Interface for the ObjectContextProvider classes.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Util.IObjectScopeProvider">
      <summary>
            Interface for the ObjectScopeProvider classes.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.AbstractBlob">
      <summary>
            Base class for binary large objects.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.AbstractBlob.STANDARD">
      <summary>
            Indicates, that standard behavior is requested: blob is 
            loaded completely into memory.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.AbstractBlob.INCREMENTAL">
      <summary>
            Indicates, that non-standard behavior is requested: blob is 
            loaded chunkwise into memory. Only available with the 
            FastObjects backend.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.AbstractBlob.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>
            Sets the position within the current Blob.
            There must be an active transaction, when this method is called.
            </summary>
      <param name="offset">
            A byte offset relative to the origin parameter.</param>
      <param name="origin">A value of type SeekOrigin indicating the 
            reference point used to obtain the new position.
            </param>
      <returns>The new position within the current Blob.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.AbstractBlob.SetLength(System.Int64)">
      <summary>
            Changes the size of a Blob.
            There must be an active transaction, when this method is called.
            </summary>
      <param name="value">The new length of the Blob in bytes.</param>
      <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.AbstractBlob.Close">
      <summary>
            Flushes the content of the Blob.
            There must be an active transaction, when this method is called.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.AbstractBlob.Flush">
      <summary>
            Clears all buffers for this Blob and causes any buffered data to 
            be written to the underlying device. 
            There must be an active transaction, when this method is called.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.AbstractBlob.ReadByte">
      <summary>
            Reads a byte from the Blob and advances the position 
            within the Blob by one byte, or returns -1 if at the end 
            of the Blob. 
            There must be an active transaction, when this method is called.
            </summary>
      <para>An active transaction is required.</para>
      <returns>The value at the current position of <c>-1</c> if
            the end has been reached.</returns>
      <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.AbstractBlob.Read(System.Byte[],System.Int32)">
      <summary>
            Reads a sequence of bytes from the specified 
            position. The current position within the Blob is not modified. 
            There must be an active transaction, when this method is called.
            </summary>
      <param name="buffer"> The byte array to contain the data read. The 
            length of the array determines the number of bytes to be read.
            </param>
      <param name="pos">The position in the Blob to begin reading from
            (zero based). </param>
      <returns>The total number of bytes read into the buffer. This can 
            be less than the number of bytes requested if that many bytes are 
            not available, or zero (0) if the end of the Blob has been reached.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.AbstractBlob.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Reads a number of bytes from to the specified position and 
            advances the 
            position within the Blob by the number of bytes read.
            There must be an active transaction, when this method is called.
            </summary>
      <param name="buffer">An array of bytes. 
            Contains the byte values of the Blob
            between offset and (offset + count - 1) when this method returns.
            </param>
      <param name="offset">The zero-based byte offset in buffer at which
            to begin storing the data read from the current Blob.</param>
      <param name="count"> 
            The maximum number of bytes to be read from the current 
            Blob position.
            </param>
      <returns>The total number of bytes read into the buffer. This can 
            be less than the number of bytes requested if that many bytes are 
            not available, or zero (0) if the end of the Blob has been reached.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer" /> is too small.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Illegal value of
            <paramref name="offset" /> or <paramref name="count" />.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.AbstractBlob.WriteByte(System.Byte)">
      <summary>
             Writes a byte to the Blob and advances the position 
             within the Blob by one byte. 
             There must be an active transaction, when this method is called.
             </summary>
      <param name="value">The byte value to write to the current position.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            	Blob was closed before.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.AbstractBlob.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Writes a sequence of bytes to the current Blob 
            position and 
            advances the current position by the number of 
            bytes written.
            There must be an active transaction, when this method is called.
            </summary>
      <param name="buffer">
            An array of bytes. This method copies <paramref name="count" />
            bytes from buffer to the current Blob.
            </param>
      <param name="offset">The zero-based byte offset in 
            <paramref name="buffer" /> 
            from which to begin copying bytes to the current Blob.
            </param>
      <param name="count"> 
            The number of bytes to be written to the current Blob.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer" /> is too small.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Illegal value of
            <paramref name="offset" /> or <paramref name="count" />.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.AbstractBlob.Write(System.Byte[],System.Int32)">
      <summary>
            Writes a sequence of bytes to the current Blob at the specified
            position. The current position within this Blob is not changed.
            There must be an active transaction, when this method is called.
            </summary>
      <param name="pos">The position in the Blob to begin writing 
            (zero based).</param>
      <param name="buffer">The byte array containing the data to be 
            written. 
            The length of the array determines the number of bytes written.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer" /> is null.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.AbstractBlob.ToString">
      <summary>Returns a string that represents the current Blob.
            </summary>
      <returns>A string that represents the current Blob.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.AbstractBlob.Equals(System.Object)">
      <summary>
            Determines whether two Blob instances have the same content
            and are equal.
            There must be an active transaction, when this method is called.
            </summary>
      <returns>
        <c>true</c> if the other Blob has the same content; 
            otherwise, <c>false</c>.</returns>
      <param name="obj">The other blob to compare with.</param>
    </member>
    <member name="M:Telerik.OpenAccess.AbstractBlob.GetHashCode">
      <summary>
            Serves as a hash function for Blobs, suitable for use in hashing 
            algorithms and data structures like a hash table.
            There must be an active transaction, when this method is called.
            </summary>
      <returns>A hash code for this object.
            </returns>
    </member>
    <member name="P:Telerik.OpenAccess.AbstractBlob.CanRead">
      <summary>
            Indicates whether the Blob content can be read.
            This is possible if there is an active transaction.
            </summary>
      <value>
        <c>true</c> if reading is supported;
            otherwise, <c>false</c>.
            </value>
      <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
    </member>
    <member name="P:Telerik.OpenAccess.AbstractBlob.CanWrite">
      <summary>
            Indicates whether the Blob content can be modified.
            This is possible if there is an active transaction.
            </summary>
      <value>
        <c>true</c> if writing is supported; 
            otherwise, <c>false</c>.
            </value>
      <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
    </member>
    <member name="P:Telerik.OpenAccess.AbstractBlob.CanSeek">
      <summary>
            Indicates whether the Blob supports seeking. 
            This is possible if there is an active transaction.
            </summary>
      <value>Returns <c>true</c> if seeking is supported;
             otherwise, <c>false</c>.
            </value>
      <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
    </member>
    <member name="P:Telerik.OpenAccess.AbstractBlob.Length">
      <summary>
            Gets the size of the Blob in bytes.
            There must be an active transaction, when this method is called.
            </summary>
      <value>The size of the Blob in bytes.</value>
      <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
    </member>
    <member name="P:Telerik.OpenAccess.AbstractBlob.Position">
      <summary>
            Controls the actual position within the current Blob.
            There must be an active transaction when this property is used.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
      <value>The byte position. (zero-based)</value>
    </member>
    <member name="T:Telerik.OpenAccess.DefaultFetchGroupAttribute">
      <summary>
            Specifies, whether this field is member of the so-called default
            fetch group. The default fetch group is the set of fields that
            are retrieved, if any field of the object is accessed the very first
            time.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.DefaultFetchGroupAttribute.#ctor">
      <summary>
            The field being tagged is member of the default fetch group.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.DefaultFetchGroupAttribute.#ctor(System.Boolean)">
      <summary>
            Controls whether the tagged field is a member of the default 
            fetch group.
            </summary>
      <param name="dfg">If <c>true</c> the member is included in the
            default fetch group, otherwise not.</param>
    </member>
    <member name="P:Telerik.OpenAccess.DefaultFetchGroupAttribute.IsIncluded">
      <summary>
            Indicates whether the tagged member is included in the default 
            fetch group.
            </summary>
      <value>
        <c>true</c> if the member is included</value>
    </member>
    <member name="T:Telerik.OpenAccess.PersistentAttribute">
      <summary>
            Declares a class to be persistence-capable. 
            This attribute is not inherited and must be specified for each 
            class in a class hierarchy
            individually. Only field values (no code) of persistent classes 
            within a class
            hierarchy are stored in the database.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.PersistentAttribute.#ctor">
      <summary>
            Declares a class to be persistence-capable; instances of such
            a class can be made persistent in a database.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.PersistentAttribute.GetAliasSet">
      <summary>
            Indicates whether the Alias property was set.
            </summary>
      <value>
        <c>true</c> if the Alias property was given 
            a value.</value>
    </member>
    <member name="P:Telerik.OpenAccess.PersistentAttribute.Identity">
      <summary>
            Determines, whether the identity for objects is automatically 
            provided by the runtime system (internal identity) or
            is provided by the values of certain fields of an object.
            </summary>
      <value>
            If set to a particular <code>System.Type</code> and not 
            <code>null</code>
            then single field identity is used, otherwise internal identity 
            is used.
            Defaults to <code>null</code>, meaning internal identity.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.PersistentAttribute.ApplicationIdentity">
      <summary>
            ApplicationIdentity is obsolete, please use Identity instead.
            </summary>
      <value>
            The identifying type for this persistent class.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.PersistentAttribute.IdentityField">
      <summary>
            Determines the field used for single field identity.
            </summary>
      <value>
            The name of a field to hold the identity (primary key).
            Defaults to <code>null</code>, meaning internal identity should be used.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.PersistentAttribute.VersionField">
      <summary>
            Determines the field used for optimistic concurrency control.
            </summary>
      <value>
            The name of a field to hold the version information.
            Defaults to <code>null</code>.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.PersistentAttribute.IdentityClassName">
      <summary>
            Determines, whether the identity for objects is automatically 
            provided by the runtime system (internal identity) or
            is provided by the values of certain fields of an object.
            Only intended for situations,
            where no type, but a string can be specified. (e.g. J#)
            </summary>
      <value>
            If set to the name of a particular <code>System.Type</code> 
            and not <code>null</code>
            then single field identity is used, otherwise internal identity is used.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.PersistentAttribute.ApplicationIdentityClassName">
      <summary>
            ApplicationIdentityClassName is obsolete, please use IdentityClassName instead.
            </summary>
      <value>
            The name of the identifying type for this persistent class.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.PersistentAttribute.Alias">
      <summary>
            Controls the alias name for the attributed class. 
            Useful for OQL-Queries to abbreviate long class names.
            </summary>
      <value>
            If an alias name was specified, its value will be returned here.
            Default is <c>null</c>.
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.TransientAttribute">
      <summary>
            Declares a field of a persistence-capable class to be transient,
            and its value will not be stored or maintained by 
            the database.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.TransientAttribute.#ctor">
      <summary>
            Declares a field of a persistence-capable class to be transient.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.SerializeToBlobAttribute">
      <summary>
            Declares a field of a persistence-capable class to be serialized 
            and stored as a binary large object (Blob) in the database.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.SerializeToBlobAttribute.#ctor">
      <summary>
            Declares a field member to be serialized and stored as a
            uninterpreted Blob.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.DependAttribute">
      <summary>
            Declares a referenced object to be dependent on the referencing object.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.DependAttribute.#ctor">
      <summary>
            Declares a field member object as contingent upon the 
            referencing object.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.ItemTypeAttribute">
      <summary>
             Specifies the item type for 
             a Collection field or the key / value types 
             for a IDictionary field of a persistence-capable class.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ItemTypeAttribute.#ctor(System.Type)">
      <summary>
            Declares the item type for elements of a Collection.
            </summary>
      <param name="typeOfElements">The type of the elements.</param>
    </member>
    <member name="M:Telerik.OpenAccess.ItemTypeAttribute.#ctor(System.String)">
      <summary>
            Declares the item type for elements of a Collection.
            </summary>
      <param name="typeOfElements">The type of the elements.</param>
    </member>
    <member name="M:Telerik.OpenAccess.ItemTypeAttribute.#ctor(System.Type,System.Type)">
      <summary>
            Declares the key type and the value type for elements 
            of an IDictionary.
            </summary>
      <param name="typeOfKey">The type of the keys.</param>
      <param name="typeOfValue">The type of the values.</param>
    </member>
    <member name="M:Telerik.OpenAccess.ItemTypeAttribute.#ctor(System.String,System.String)">
      <summary>
            Declares the key type and the value type for elements 
            of an IDictionary.
            </summary>
      <param name="typeOfKey">The type of the keys.</param>
      <param name="typeOfValue">The type of the values.</param>
    </member>
    <member name="P:Telerik.OpenAccess.ItemTypeAttribute.KeyType">
      <summary>
            Gets the key type (IDictionary).
            </summary>
      <value>The specified type of the keys. Default is <c>null</c>. 
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.ItemTypeAttribute.ValueType">
      <summary>
            Gets the value type (IDictionary).
            </summary>
      <value>The specified type of the values. Default is <c>null</c>.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.ItemTypeAttribute.ItemType">
      <summary>
            Gets the item type (Collection).
            </summary>
      <value>The specified type of the items. Default is <c>null</c>.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.ItemTypeAttribute.ItemTypeSet">
      <summary>
            Indicates whether the item type has been set.
            </summary>
      <value>
        <c>true</c> if the item type has been set. 
            Default is <c>false</c>.</value>
    </member>
    <member name="P:Telerik.OpenAccess.ItemTypeAttribute.KeyTypeSet">
      <summary>
            Indicates if the key type has been set.
            </summary>
      <value>
        <c>true</c> if the key type has been set.
             Default is <c>false</c>.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.ItemTypeAttribute.ValueTypeSet">
      <summary>
            Indicates if the value type has been set.
            </summary>
      <value>
        <c>true</c> if the value type has been set.
            Default is <c>false</c>.
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.IndexAttribute">
      <summary>
            Indexes are defined in the XML metadata, please see
            the programmer's guide for more information (obsolete).
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.IndexAttribute.#ctor(System.String,System.String)">
      <summary>
            Defines a simple index for a member of a persistence-capable class.
            </summary>
      <param name="indexName">The name of the index.</param>
      <param name="memberDescription">The name and properties of the 
            member to be included in this index. 
            </param>
    </member>
    <member name="M:Telerik.OpenAccess.IndexAttribute.#ctor(System.String,System.String,System.String)">
      <summary>
            Defines a compound index for two members of a 
            persistence-capable class.
            </summary>
      <param name="indexName">The name of the index.</param>
      <param name="memberDescription1">The name and properties of the 
            first member to be included in this index. 
            </param>
      <param name="memberDescription2">The name and properties of the 
            second member to be included in this index. 
            </param>
    </member>
    <member name="M:Telerik.OpenAccess.IndexAttribute.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
            Defines a compound index for three members of a 
            persistence-capable class.
            </summary>
      <param name="indexName">The name of the index.</param>
      <param name="memberDescription1">The name and properties of the 
            first member to be included in this index. 
            </param>
      <param name="memberDescription2">The name and properties of the 
            second member to be included in this index. 
            </param>
      <param name="memberDescription3">The name and properties of the 
            third member to be included in this index. 
            </param>
    </member>
    <member name="M:Telerik.OpenAccess.IndexAttribute.#ctor(System.String,System.String[])">
      <summary>
            Defines an index for a persistence-capable class.
            </summary>
      <param name="indexName">The name of the index.</param>
      <param name="memberDescriptions">The name and properties of the 
            members to be included in this index. The order of the field 
            names is important.
            </param>
    </member>
    <member name="P:Telerik.OpenAccess.IndexAttribute.Name">
      <summary>
            Gets the name of the index.
            </summary>
      <value>The name of the index as specified.</value>
    </member>
    <member name="P:Telerik.OpenAccess.IndexAttribute.FieldNames">
      <summary>
            Gets the field names used by the index.
            </summary>
      <value>
            The names of the field components of the index.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.IndexAttribute.SignificanceSet">
      <summary>
            Indicates whether a user supplied significance is used or not.
            </summary>
      <value>
        <c>true</c> if the index field definition is using a 
            user-supplied significance.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.IndexAttribute.DescendingSet">
      <summary>
            Indicates whether a user supplied sort order is used or not.
            </summary>
      <value>
        <c>true</c> if the index field definition is using a user-supplied 
            sort order.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.IndexAttribute.Significance">
      <summary>
            Gets the significance of the corresponding field in the index.
            </summary>
      <value>
            The significance of the associated index field.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.IndexAttribute.Descending">
      <summary>
            Indicates whether the corresponding index field uses 
            descending sort order or not.
            </summary>
      <value>
        <c>true</c> if the corresponding field is indexed using 
            descending sort order.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.IndexAttribute.Unique">
      <summary>
            Controls if the index contains only unique values or not (default).
            </summary>
      <value>
        <c>true</c> if the index is a unique index. Default is <c>false</c>.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.IndexAttribute.Fulltext">
      <summary>
            Controls if the index is a fulltext index or not (default).
            </summary>
      <value>
        <c>true</c> if the index is a fulltext index. Default is<c>false</c>.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.IndexAttribute.UniqueSet">
      <summary>
            Indicates whether the index definition is using a user supplied
            uniqueness setting.
            </summary>
      <value>
        <c>true</c> if the index definition is using user supplied setting.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.IndexAttribute.FulltextSet">
      <summary>
            Indicates whether the index definition is using a user supplied
            fulltext index setting.
            </summary>
      <value>
        <c>true</c> if the index definition is using user supplied setting.
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.FetchFieldAttribute">
      <summary>
            Marks a field as part of a named
            FetchGroup. A FetchGroup is a set of fields which
            are retrieved together when the FetchGroup name is contained in the actual
            FetchPlan configuration.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.FetchFieldAttribute.#ctor(System.String)">
      <summary>
            Declares a field as part of a named FetchGroup.
            </summary>
      <param name="fetchGroupName">The name of the FetchGroup.</param>
    </member>
    <member name="P:Telerik.OpenAccess.FetchFieldAttribute.Next">
      <summary>
             Sets a FetchGroup at the referenced class as the FetchGroup to be used.
             </summary>
      <value>
            Name of the FetchGroup to be used next.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.FetchFieldAttribute.KeyNext">
      <summary>
             Sets a FetchGroup for the key field at the referenced class as the FetchGroup to be used.
             </summary>
      <value>
            Name of the FetchGroup to be used next for the key reference.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.FetchFieldAttribute.Path">
      <summary>
             Adds a specific field at the referenced class to the FetchGroup.
             </summary>
      <value>
            Path specification
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.FetchFieldAttribute.KeyPath">
      <summary>
             Adds a specific field for the key at the referenced class to the FetchGroup.
             </summary>
      <value>
            Path specification
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.FetchFieldAttribute.Depth">
      <summary>
             Controls the depth of the fetch operation.
             </summary>
      <value>
            The maximum number of levels to be fetched. (Default: 1)
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.FetchFieldAttribute.KeyDepth">
      <summary>
             Controls the depth of the fetch operation on the key part.
             </summary>
      <value>
            The maximum number of levels to be fetched. (Default: 1)
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.FetchFieldAttribute.Name">
      <summary>
            Gets the name of the FetchGroup.
            </summary>
      <value>
            FetchGroup name.
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.FetchGroupAttribute">
      <summary>
            Declares a named FetchGroup on class level.
            The FetchGroup is a set of fields which
            are retrieved together if the fetch group name is part of the actual
            FetchPlan configuration.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.FetchGroupAttribute.#ctor(System.String,System.String)">
      <summary>
            Defines a FetchGroup with one included FetchGroup.
            </summary>
      <param name="fetchGroupName">The name of the FetchGroup.</param>
      <param name="addFetchGroup1">The name of the FetchGroup to 
            be included in this FetchGroup. 
            </param>
    </member>
    <member name="M:Telerik.OpenAccess.FetchGroupAttribute.#ctor(System.String,System.String,System.String)">
      <summary>
            Defines a FetchGroup with two included FetchGroups.
            </summary>
      <param name="fetchGroupName">The name of the FetchGroup.</param>
      <param name="addFetchGroup1">The name of the first FetchGroup to 
            be included in this FetchGroup. 
            </param>
      <param name="addFetchGroup2">The name of the second FetchGroup to 
            be included in this FetchGroup. 
            </param>
    </member>
    <member name="M:Telerik.OpenAccess.FetchGroupAttribute.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
            Defines a FetchGroup with three included FetchGroups.
            </summary>
      <param name="fetchGroupName">The name of the FetchGroup.</param>
      <param name="addFetchGroup1">The name of the first FetchGroup to 
            be included in this FetchGroup. 
            </param>
      <param name="addFetchGroup2">The name of the second FetchGroup to 
            be included in this FetchGroup. 
            </param>
      <param name="addFetchGroup3">The name of the third FetchGroup to 
            be included in this FetchGroup. 
            </param>
    </member>
    <member name="M:Telerik.OpenAccess.FetchGroupAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)">
      <summary>
            Defines a FetchGroup with four included FetchGroups.
            </summary>
      <param name="fetchGroupName">The name of the FetchGroup.</param>
      <param name="addFetchGroup1">The name of the first FetchGroup to 
            be included in this FetchGroup. 
            </param>
      <param name="addFetchGroup2">The name of the second FetchGroup to 
            be included in this FetchGroup. 
            </param>
      <param name="addFetchGroup3">The name of the third FetchGroup to 
            be included in this FetchGroup. 
            </param>
      <param name="addFetchGroup4">The name of the forth FetchGroup to 
            be included in this FetchGroup. 
            </param>
    </member>
    <member name="M:Telerik.OpenAccess.FetchGroupAttribute.#ctor(System.String,System.String[])">
      <summary>
            Defines a FetchGroup with several included FetchGroups.
            </summary>
      <param name="fetchGroupName">The name of the FetchGroup.</param>
      <param name="addFetchGroup">An array of names of FetchGroup to 
            be included in this FetchGroup. 
            </param>
    </member>
    <member name="P:Telerik.OpenAccess.FetchGroupAttribute.Name">
      <summary>
            Gets the name of the FetchGroup. All FetchGroups with the same name
            are used at the same time.
            </summary>
      <value>
            The name of the FetchGroup.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.FetchGroupAttribute.Groups">
      <summary>
            Gets the collection of referenced FetchGroups.
            </summary>
      <value>
            The names of the FetchGroups.
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.FieldAliasAttribute">
      <summary>
            Declares the property to be an alias for a field during OQL query evaluation.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.FieldAliasAttribute.#ctor(System.String)">
      <summary>
            Declares a property to be an alias for the given field.
            </summary>
      <param name="nameOfField">A valid field name.</param>
    </member>
    <member name="P:Telerik.OpenAccess.FieldAliasAttribute.FieldName">
      <summary>
            Gets the name of the field to query for this property.
            </summary>
      <value>
            A valid field name.
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.ManagedInverseAttribute">
      <summary>
            Declares a collection to be managed by it's reverse relationship field.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ManagedInverseAttribute.#ctor(System.String)">
      <summary>
            Declares a inverse field of a managed relationship.
            </summary>
      <param name="nameOfInverseField">A valid field name of the inverse type or <c>{auto}</c>
            for automatic held reference.</param>
    </member>
    <member name="P:Telerik.OpenAccess.ManagedInverseAttribute.InverseFieldName">
      <summary>
            Gets the name of the inverse field.
            </summary>
      <value>
            A valid field name for the type of the inverse side.
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.Blob">
      <summary>
            Implements binary large objects (Blob) which are accessed as
            a whole.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Blob.#ctor(Telerik.OpenAccess.IObjectScope)">
      <summary>
            Creates a new Blob object. An active transaction is required.
            </summary>
      <param name="os">The object scope maintaining the Blob.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Blob.#ctor(Telerik.OpenAccess.ObjectContainer)">
      <summary>
            Creates a new Blob object using an ObjectContainer.
            </summary>
      <param name="container">The writable object container.</param>
    </member>
    <member name="T:Telerik.OpenAccess.Database">
      <summary>
            Represents one database which is identified by an URL; serves
            as factory object for transactions, queries, object identities.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Database.Get(System.String)">
      <summary>
            Returns the database object for the passed connection id using the application configuration file. 
            </summary>
      <param name="connectionId">The connection id for the database.</param>
      <returns>The Database instance.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Database.Get(System.String,System.Xml.XmlElement)">
      <summary>
            Returns the database object for the passed connection id and configuration information. 
            </summary>
      <param name="connectionId">The connection id for the database.</param>
      <param name="configOverride">The XmlElement representing the database configuration node 
            and all subnodes of the configuration. </param>
      <returns>The Database instance.</returns>
      <exception cref="T:System.ArgumentException">No connectionId given.</exception>
      <exception cref="T:System.ArgumentException">No configOverride given.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.Database.Get(System.String,System.Xml.XmlElement,System.Reflection.Assembly[])">
      <summary>
            Returns the database object for the passed connection id, configuration information and 
            the list of assemblies with persistent class information.
            </summary>
      <param name="connectionId">The connection id for the database.</param>
      <param name="configOverride">The XmlElement representing the database configuration node 
            and all subnodes of the configuration. </param>
      <param name="entryAssemblies">The list of all assemblies with persistent classes inside. 
            Use this method only if your application is not linked directly or indirectly to the 
            persistent classes assemblies. Only this list of assemblies will be used, it must be complete!
            </param>
      <returns>The Database instance.</returns>
      <exception cref="T:System.ArgumentException">No connectionId given</exception>
      <exception cref="T:System.ArgumentException">No configOverride given</exception>
      <exception cref="T:System.ArgumentException">No entryAssemblies given</exception>
    </member>
    <member name="M:Telerik.OpenAccess.Database.GetObjectScope">
      <overloads>Gets a connection for this database.</overloads>
      <summary>
             Gets a connection for this database. 
            </summary>
      <returns>A connected <see cref="T:Telerik.OpenAccess.IObjectScope" /> instance with 
            default options.</returns>
      <exception cref="T:Telerik.OpenAccess.Exceptions.DatabaseNotFoundException">
            Database files could not be found</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.DataStoreException">
            Database files could not be opened</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.AuthorizationException">
            User is not authorized to access the database</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.CommunicationException">
            Server host name could not be resolved</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.CommunicationException">
            Database server is not running or not reachable</exception>
      <exception cref="T:Telerik.OpenAccess.OpenAccessException">
            Server name is invalid: not port settings allowed</exception>
    </member>
    <member name="M:Telerik.OpenAccess.Database.GetObjectScope(Telerik.OpenAccess.TransactionProvider)">
      <overloads>Gets a connection for this database.</overloads>
      <summary>
             Gets a connection for this database. 
            </summary>
      <param name="provider">The style of the transaction controlling.</param>
      <returns>A connected <see cref="T:Telerik.OpenAccess.IObjectScope" /> instance with 
            special <see cref="T:Telerik.OpenAccess.TransactionProvider" /> options.</returns>
      <exception cref="T:Telerik.OpenAccess.Exceptions.DatabaseNotFoundException">
            Database files could not be found</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.DataStoreException">
            Database files could not be opened</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.AuthorizationException">
            User is not authorized to access the database</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.CommunicationException">
            Server host name could not be resolved</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.CommunicationException">
            Database server is not running or not reachable</exception>
      <exception cref="T:Telerik.OpenAccess.OpenAccessException">
            Server name is invalid: not port settings allowed</exception>
    </member>
    <member name="M:Telerik.OpenAccess.Database.GetObjectScope(System.String,System.String)">
      <summary>
             Gets a connection for this database.  
             The supplied username and 
             password are used for the database connection.
            </summary>
      <returns>An <see cref="T:Telerik.OpenAccess.IObjectScope" /> instance with default 
            options.</returns>
      <param name="username">The user name for the connection.</param>
      <param name="password">The password for the connection.</param>
      <exception cref="T:Telerik.OpenAccess.Exceptions.DatabaseNotFoundException">
            Database files could not be found</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.DataStoreException">
            Database files could not be opened</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.AuthorizationException">
            User is not authorized to access the database</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.CommunicationException">
            Server host name could not be resolved</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.CommunicationException">
            Database server is not running or not reachable</exception>
      <exception cref="T:Telerik.OpenAccess.OpenAccessException">
            Server name is invalid: not port settings allowed</exception>
    </member>
    <member name="M:Telerik.OpenAccess.Database.GetObjectScope(System.String,System.String,Telerik.OpenAccess.TransactionProvider)">
      <overloads>Gets a connection for this database.</overloads>
      <summary>
             Gets a connection for this database. 
             The supplied username and 
             password are used for the database connection.
            </summary>
      <returns>A connected <see cref="T:Telerik.OpenAccess.IObjectScope" /> instance with 
            special <see cref="T:Telerik.OpenAccess.TransactionProvider" /> options.</returns>
      <exception cref="T:Telerik.OpenAccess.Exceptions.DatabaseNotFoundException">
            Database files could not be found</exception>
      <param name="username">The user name for the connection.</param>
      <param name="password">The password for the connection.</param>
      <param name="provider">The style of the transaction controlling.</param>
      <exception cref="T:Telerik.OpenAccess.Exceptions.DataStoreException">
            Database files could not be opened</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.AuthorizationException">
            User is not authorized to access the database</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.CommunicationException">
            Server host name could not be resolved</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.CommunicationException">
            Database server is not running or not reachable</exception>
      <exception cref="T:Telerik.OpenAccess.OpenAccessException">
            Server name is invalid: not port settings allowed</exception>
    </member>
    <member name="M:Telerik.OpenAccess.Database.Dispose">
      <summary>
            Releases all resources allocated by the database. Closes all
            database connections.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Database.ParseObjectId(System.Type,System.String)">
      <summary>
            Creates database identifiers of persistent objects by parsing 
            a string representation.
            </summary>
      <param name="oidstr">
            Database object ID in string form.
            </param>
      <param name="t">
            The Type of the object with the specified id. For internal identity,
            null can be specified.
            </param>
      <returns>
            New database object identifier.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Database.GetClassId(System.Type)">
      <summary>
            Returns the class id for a specific type
            </summary>
      <param name="t">
            The Type of the class to get the id from.
            </param>
      <returns>
            The class id as int
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Database.GetContext(System.Object)">
      <summary>
             Returns the IObjectContext instance responsible for the given persistence capable object.
             </summary>
      <returns>
             The context of the passed object: either an <see cref="T:Telerik.OpenAccess.IObjectScope" /> or an 
             <see cref="T:Telerik.OpenAccess.ObjectContainer" /> or <c>null</c>.
             </returns>
      <param name="persistentObject">
             The persistence capable object whose context is to be returned.
             </param>
      <exception cref="T:System.ArgumentNullException">
             No <paramref name="persistentObject" /> has been given.
             </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
             Type of the <paramref name="persistentObject" /> is not declared 
             <see cref="T:Telerik.OpenAccess.PersistentAttribute">[Persistent]</see> or not enhanced.
             </exception>
    </member>
    <member name="M:Telerik.OpenAccess.Database.GetObjectId(System.Object)">
      <summary>
            Returns the database object ID for the passed persistence capable
            instance.
            </summary>
      <param name="persistenceCapable">The persistence-capable instance.
            </param>
      <returns>Database object identity or <c>null</c> if 
            instance is transient.</returns>
      <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
            Type of the instance is not declared [Persistent] or not enhanced.
            </exception>
    </member>
    <member name="P:Telerik.OpenAccess.Database.ConnectionURL">
      <summary>
            Gets the URL for this database object.
            </summary>
      <value>String in URL syntax.</value>
    </member>
    <member name="P:Telerik.OpenAccess.Database.Properties">
      <summary>
            Controls the settings of the database connections.
            </summary>
      <value>
            Instance with the properties of the database.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.Database.OID">
      <summary>
            Get a helper object for database object identity instances.
            </summary>
      <value>
            The helper instance.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.Database.DefaultTransactionProperties">
      <summary>
            Gets the default properties for the transactions.
            </summary>
      <value>Transaction properties instance with the default values.</value>
    </member>
    <member name="T:Telerik.OpenAccess.IDatabaseProperties">
      <summary>
            Controls the settings of a database.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.IDatabaseProperties.ConnectionTimeout">
      <summary>
            Controls the timeout of database client/server connections after the last ObjectScope disposal.
            </summary>
      <value>The timeout value is given in milliseconds.
            </value>
      <exception cref="T:System.InvalidOperationException">
            Database has already been opened.
            </exception>
    </member>
    <member name="P:Telerik.OpenAccess.IDatabaseProperties.TransactionProvider">
      <summary>
            Specifies the usage pattern for transactions.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The database has already been opened.
            </exception>
      <value>Indicates which transaction provider is (to be) used.</value>
    </member>
    <member name="T:Telerik.OpenAccess.OpenAccessDataSource">
      <summary>
            The Data Source implementation for Telerik.OpenAccess
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessDataSource.#ctor">
      <summary>
            Constructor used from the Visual Studio designer.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessDataSource.GetHierarchicalView(System.String)">
      <summary>
            Gets the data source view object for the OpenAccessDataSource. The viewPath parameter can be a valid OQL query.
            </summary>
      <param name="viewPath">An OQL query that identifies a node from which the current hierarchical view is built.</param>
      <returns>Returns an HierarchicalDataSourceView object that represents a single view of the data starting with the data node identified by the viewPath parameter.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessDataSource.GetView(System.String)">
      <summary>
            Returns the data source view that is associated with the OpenAccessDataSource object. 
            </summary>
      <param name="viewName">The name of the view to retrieve, which must be "DefaultView".</param>
      <returns>The data source view that is associated with the OpenAccessDataSource object.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessDataSource.GetViewNames">
      <summary>
            Returns a collection of names that represents the list of view objects that are associated with the OpenAccessDataSource control. 
            </summary>
      <returns>A collection with one element that contains the name "DefaultView".</returns>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessDataSource.OnInit(System.EventArgs)">
      <summary>
            Adds a LoadComplete event handler to the Page control that contains the OpenAccessDataSource control. 
            </summary>
      <param name="e">An EventArgs object that contains event data.</param>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessDataSource.OnUnload(System.EventArgs)">
      <summary>
            Raises the Unload event.
            </summary>
      <param name="e">An EventArgs object that contains event data. </param>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessDataSource.CreateView">
      <summary>
            Returns the default implementation of the DataSourceView used. Override to provide custom implementation.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessDataSource.LoadControlState(System.Object)">
      <summary>
            Loads the state of the properties in the OpenAccessDataSource control that need to be persisted. 
            </summary>
      <param name="savedState">The Object that contains state information.</param>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessDataSource.SaveControlState">
      <summary>
            Saves the state of the properties in the OpenAccessDataSource control that need to be persisted. 
            </summary>
      <returns>The Object that contains state information.</returns>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSource.AutoGenerateOrderByClause">
      <summary>
            Gets or sets a value that indicates whether the OpenAccessDataSource control dynamically creates an ORDER BY clause 
            based on values in the OrderByParameters collection. 
            </summary>
      <value>true if the OpenAccessDataSource control creates the ORDER BY clause; otherwise false. The default value is false.</value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSource.AutoGenerateWhereClause">
      <summary>
            Gets or sets a value that indicates whether the OpenAccessDataSource control dynamically creates a WHERE clause 
            based on values defined in the WhereParameters collection. 
            </summary>
      <value>true if the OpenAccessDataSource control creates the WHERE clause; otherwise, false. The default value is false.</value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSource.StoreOriginalValuesInViewState">
      <summary>
            Gets or sets a value that indicates whether the data from the data source should be stored in view state to make sure that 
            the data has not been changed by another process before it is updated or deleted.
            </summary>
      <value>true if the values will be stored in view state; otherwise, false. The default value is true.</value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSource.EnablePaging">
      <summary>
            Controls weather the DataSource should use database paging.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSource.AutoPage">
      <summary>
            Gets or sets a value that indicates whether the OpenAccessDataSource control supports navigation through sections of the data at run time. 
            </summary>
      <value>true if the user can page through the data; otherwise, false. The default value is true.</value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSource.AutoSort">
      <summary>
            Gets or sets a value that indicates whether the OpenAccessDataSource control supports sorting the data at run time. 
            </summary>
      <value>true if the user can sort the data; otherwise, false. The default value is true.</value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSource.ContextTypeName">
      <summary>
            Gets or sets the fully qualified name of the typed IObjectScope context used by the OpenAccessDataSource control. 
            </summary>
      <value>A String that is the fully qualified name of the type.</value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSource.ObjectContextProvider">
      <summary>
            Gets or sets the fully qualified name of the typed IObjectContextProvider class used by the OpenAccessDataSource control. 
            </summary>
      <value>A String that is the fully qualified name of the type.</value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSource.ContextType">
      <summary>
            Gets or sets the typed IObjectScope context used by the OpenAccessDataSource control.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSource.Extent">
      <summary>
            Gets or sets the name of the entity set used by the OpenAccessDataSource control. 
            </summary>
      <value>The entity set name.</value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSource.TypeName">
      <summary>
            Gets or sets the type name that limits the query to only results of a specific derived type.
            </summary>
      <value>
            The filter expression.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSource.Where">
      <summary>
            Gets or sets a value that specifies which filter is used 
            for retrieving data.
            </summary>
      <value>
            A string that is used to create the Filter Expressions.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSource.WhereParameters">
      <summary>
            Gets the collection of parameters that are used to create the WHERE clause.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSource.CommandText">
      <summary>
            Gets or sets an OQL command that defines the query.
            </summary>
      <value>A string value that is the OQL query.</value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSource.CommandParameters">
      <summary>
            Gets the parameter collection for the query. 
            </summary>
      <value>A ParameterCollection that contains the parameters that are passed to the query command. </value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSource.DeleteParameters">
      <summary>
            Gets the collection of parameters that are used during a delete operation.
            </summary>
      <value>The parameters that are used during a delete operation.</value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSource.UpdateParameters">
      <summary>
            Gets the collection of parameters that are used during an update operation.
            </summary>
      <value>The parameters that are used during an update operation.</value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSource.SelectParameters">
      <summary>
            Gets the collection of parameters that are used to create the projection.
            </summary>
      <value>The parameters that are used for creating the projection.</value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSource.Select">
      <summary>
            Gets or sets the projection that defines the properties to include in the query results.
            </summary>
      <value>The parameters that are used for creating the ORDER BY clause.</value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSource.OrderBy">
      <summary>
            Gets or sets the OQL expression that specifies how to order the query results.
            </summary>
      <value>The ORDER BY clause.</value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSource.OrderByParameters">
      <summary>
            Gets the collection of parameters that are used to create the ORDER BY clause.
            </summary>
      <value>The parameters that are used for creating the ORDER BY clause.</value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSource.InsertParameters">
      <summary>
            Gets the collection of parameters that are used during an insert operation.
            </summary>
      <value>The parameters that are used during an insert operation.</value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSource.GroupBy">
      <summary>
            Gets or sets the OQL expression that specifies how to group the query results. 
            </summary>
      <value>The GROUP BY clause.</value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSource.EnableDelete">
      <summary>
            Gets or sets a value that indicates whether data records can be deleted through the OpenAccessDataSource control. 
            </summary>
      <value>true if automatic delete operations are enabled; otherwise, false. The default value is false. </value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSource.EnableUpdate">
      <summary>
            Gets or sets a value that indicates whether objects can be modified through the OpenAccessDataSource control. 
            </summary>
      <value>true if automatic update operations are enabled; otherwise, false. The default value is false.</value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSource.EnableInsert">
      <summary>
            Gets or sets a value that indicates whether the data source view supports adding new rows. 
            </summary>
      <value>true if the view supports inserting rows; otherwise, false. The default is false.</value>
    </member>
    <member name="E:Telerik.OpenAccess.OpenAccessDataSource.ContextCreated">
      <summary>
            Occurs when the OpenAccessDataSource has finished creating the IObjectScope context instance used to work with data objects. 
            </summary>
    </member>
    <member name="E:Telerik.OpenAccess.OpenAccessDataSource.ContextCreating">
      <summary>
            Occurs when the OpenAccessDataSource creates the IObjectScope context instance used to work with data objects.
            </summary>
    </member>
    <member name="E:Telerik.OpenAccess.OpenAccessDataSource.ContextDisposing">
      <summary>
            Occurs before an IObjectScope context instance is disposed. 
            </summary>
    </member>
    <member name="E:Telerik.OpenAccess.OpenAccessDataSource.Deleted">
      <summary>
            The Deleted event enables you to access an object that was deleted from the data source. 
            The Entity property of the OpenAccessDataSourceChangedEventArgs object is used to access the deleted object.
            </summary>
    </member>
    <member name="E:Telerik.OpenAccess.OpenAccessDataSource.Deleting">
      <summary>
            The Deleting event enables you to access an object before it is deleted from the data source or to cancel the operation. 
            The Entity property of the OpenAccessDataSourceChangingEventArgs holds the object being deleted. 
            </summary>
    </member>
    <member name="E:Telerik.OpenAccess.OpenAccessDataSource.Inserted">
      <summary>
            The Inserted event enables you to access an object created in the data source. 
            The Entity property of the OpenAccessDataSourceChangedEventArgs instance is used to access the added object. 
            </summary>
    </member>
    <member name="E:Telerik.OpenAccess.OpenAccessDataSource.Inserting">
      <summary>
            The Inserting event enables you to modify or verify the object being added, add a different object, or cancel the operation. 
            Handle this event to access the object to be added from the Entity property of the OpenAccessDataSourceChangingEventArgs instance. 
            </summary>
    </member>
    <member name="E:Telerik.OpenAccess.OpenAccessDataSource.Selected">
      <summary>
            The Selected event enables you to access the results of a query and retrieve row count information. 
            Handle this event when you want to access object results or store objects in the view state. 
            </summary>
    </member>
    <member name="E:Telerik.OpenAccess.OpenAccessDataSource.Selecting">
      <summary>
            The Selecting event enables you to modify the configuration of the OpenAccessDataSource and to read or change the arguments 
            from the data-bound control before the query is constructed and executed. Handle this event when you want to modify the 
            paging or sorting behaviors of the control, or to cancel the query.
            </summary>
    </member>
    <member name="E:Telerik.OpenAccess.OpenAccessDataSource.Updated">
      <summary>
            The Updated event enables you to access an object that has just had changes persisted to the data source. 
            The Entity property of the OpenAccessDataSourceChangedEventArgs instance is used to access the updated object.
            </summary>
    </member>
    <member name="E:Telerik.OpenAccess.OpenAccessDataSource.Updating">
      <summary>
            The Updating event enables you to modify or verify changes to the object, supply a different object, or cancel the operation 
            before the changes are persisted. You can access the modified object from the Entity property of the 
            OpenAccessDataSourceChangingEventArgs object. Handle this event to verify or validate changes, or to set different 
            original values for concurrency control.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.OpenAccessDataSourceContextCreatedEventArgs">
      <summary>
            Provides data for the ContextCreated event. 
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSourceContextCreatedEventArgs.Context">
      <summary>
            Gets the IObjectScope instance used by the data source.
            </summary>
      <value>The object context used by the data source.</value>
    </member>
    <member name="T:Telerik.OpenAccess.OpenAccessDataSourceContextCreatingEventArgs">
      <summary>
            Provides data for the ContextCreating event. 
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSourceContextCreatingEventArgs.Context">
      <summary>
            Gets the IObjectScope instance used by the data source.
            </summary>
      <value>The object context used by the data source.</value>
    </member>
    <member name="T:Telerik.OpenAccess.OpenAccessDataSourceContextDisposingEventArgs">
      <summary>
            Provides data for the ContextDisposing event. 
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSourceContextDisposingEventArgs.Context">
      <summary>
            Gets the IObjectScope instance used by the data source.
            </summary>
      <value>The object context used by the data source.</value>
    </member>
    <member name="T:Telerik.OpenAccess.OpenAccessDataSourceChangedEventArgs">
      <summary>
            Provides data for the Inserted, Updated, and Deleted events. 
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSourceChangedEventArgs.Context">
      <summary>
            Gets the IObjectScope instance used by the data source.
            </summary>
      <value>The object context used by the data source.</value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSourceChangedEventArgs.Entity">
      <summary>
            Gets the object being added, modified, or updated.
            </summary>
      <value>An Object that is the entity.</value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSourceChangedEventArgs.Exception">
      <summary>
            Gets the exception that was thrown during the query.
            </summary>
      <value>The exception, if an error occurred; otherwise, a null reference (Nothing in Visual Basic).</value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSourceChangedEventArgs.ExceptionHandled">
      <summary>
            Gets or sets a value that indicates whether the exception was handled and that it should not be thrown again.
            </summary>
      <value>true if the exception was handled; otherwise, false.</value>
    </member>
    <member name="T:Telerik.OpenAccess.OpenAccessDataSourceChangingEventArgs">
      <summary>
            Provides data for the Inserting, Updating, and Deleting events.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSourceChangingEventArgs.Context">
      <summary>
            Gets the IObjectScope instance used by the data source.
            </summary>
      <value>The object context used by the data source.</value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSourceChangingEventArgs.Entity">
      <summary>
            Gets the object being added, modified, or updated.
            </summary>
      <value>An Object that is the entity.</value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSourceChangingEventArgs.Exception">
      <summary>
            Gets the exception that was thrown during the query.
            </summary>
      <value>The exception, if an error occurred; otherwise, a null reference (Nothing in Visual Basic).</value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSourceChangingEventArgs.ExceptionHandled">
      <summary>
            Gets or sets a value that indicates whether the exception was handled and that it should not be thrown again.
            </summary>
      <value>true if the exception was handled; otherwise, false.</value>
    </member>
    <member name="T:Telerik.OpenAccess.OpenAccessDataSourceSelectedEventArgs">
      <summary>
            Provides data for the Selected event. 
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSourceSelectedEventArgs.Context">
      <summary>
            Gets the IObjectScope instance used by the data source.
            </summary>
      <value>The object context used by the data source.</value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSourceSelectedEventArgs.Exception">
      <summary>
            Gets the exception that was thrown during the query.
            </summary>
      <value>The exception, if an error occurred; otherwise, a null reference (Nothing in Visual Basic).</value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSourceSelectedEventArgs.ExceptionHandled">
      <summary>
            Gets or sets a value that indicates whether the exception was handled and that it should not be thrown again.
            </summary>
      <value>true if the exception was handled; otherwise, false.</value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSourceSelectedEventArgs.Results">
      <summary>
            Gets the objects returned by the query.
            </summary>
      <value>Objects returned by the query.</value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSourceSelectedEventArgs.SelectArguments">
      <summary>
            Gets values that determine how the data is returned. 
            </summary>
      <value>An object that contains values for determining how the data is returned.</value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSourceSelectedEventArgs.TotalRowCount">
      <summary>
            Gets the total number of objects returned by the query.
            </summary>
      <value>The total number of object returned.</value>
    </member>
    <member name="T:Telerik.OpenAccess.OpenAccessDataSourceSelectingEventArgs">
      <summary>
            Provides data for the Selecting event.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSourceSelectingEventArgs.DataSource">
      <summary>
            Gets the OpenAccessDataSource instance that raised the Selecting event.
            </summary>
      <value>The data source that raised the Selecting event.</value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessDataSourceSelectingEventArgs.SelectArguments">
      <summary>
            Gets values that determine how the data is returned.
            </summary>
      <value>The data source that raised the Selecting event.</value>
    </member>
    <member name="T:Telerik.OpenAccess.FetchGroupCollector">
      <summary>
            Provides methods to calculate the object network of a root object.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.IObjectCollector">
      <summary>
            Interface for obtaining entire network of persistent objects.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectCollector.Collect(System.Object)">
      <overloads>
            When implemented by a class, calculates and returns a list of all 
            'persistence capable' objects reachable from the 'rootObject(s)'.
            </overloads>
      <summary>
            When implemented by a class, calculates and returns a list of all 'persistence 
            capable' objects reachable from the 'rootObject'.
            </summary>
      <param name="rootObject">The root object of the object network to be 
            calculated.</param>
      <returns>An <see cref="T:System.Collections.IEnumerable" /> that exposes the enumerator for 
            the objects collected.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectCollector.Collect(System.Collections.IEnumerator)">
      <summary>
            When implemented by a class, calculates and returns a list of all 'persistence 
            capable' objects reachable from the 'rootObjects'.
            </summary>
      <param name="rootObjects">Enumerator for the root objects.Object network for
            each root object will be calculated.
            </param>
      <returns>An <see cref="T:System.Collections.IEnumerable" /> that exposes the enumerator for 
            the objects collected.
            </returns>
    </member>
    <member name="F:Telerik.OpenAccess.FetchGroupCollector.DefaultFetchGroup">
      <summary>
            Used to specify that the 'Default' fetch group is to be used 
            in the Collect method.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.FetchGroupCollector.DeepFetchGroup">
      <summary>
            Used to specify that the 'Deep' fetch group is to be used 
            in the Collect method.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.FetchGroupCollector.DependFetchGroup">
      <summary>
            Used to specify that the 'Depend' fetch group is to be used 
            in the Collect method.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.FetchGroupCollector.#ctor">
            used by Closure
        </member>
    <member name="M:Telerik.OpenAccess.FetchGroupCollector.#ctor(System.String)">
      <summary>
            Initializes a new instance of FetchGroupCollector.
            </summary>
      <param name="fetchGroupName">Name of the fetch group to use while
            calculating the object network in a call to <see cref="M:Telerik.OpenAccess.FetchGroupCollector.Collect(System.Object)" />.
            </param>
    </member>
    <member name="M:Telerik.OpenAccess.FetchGroupCollector.Collect(System.Object)">
      <overloads>
            Calculates and returns a list of all 'persistence capable' objects reachable from the 
            'rootObject(s)'.
            </overloads>
      <summary>
             Calculates the object network starting from the persistent root object. 
             </summary>
      <param name="rootObject">The root object of the object network to be
             calculated.</param>
      <returns>An <see cref="T:System.Collections.IEnumerable" /> that exposes the enumerator for 
            the objects collected.
             </returns>
    </member>
    <member name="M:Telerik.OpenAccess.FetchGroupCollector.Collect(System.Collections.IEnumerator)">
      <summary>
             Calculates the object network for each of the specified persistent root objects.
             </summary>
      <param name="rootObjects">The enumerator for the root objects.</param>
      <returns>An <see cref="T:System.Collections.IEnumerable" /> that exposes the enumerator for 
            the objects collected.
             </returns>
    </member>
    <member name="T:Telerik.OpenAccess.FetchPlan">
      <summary>
            Interface for setting and changing the actual FetchPlan.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.FetchPlan.Default">
      <summary>
            Default FetchGroup name definition.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.FetchPlan.All">
      <summary>
            Maximum FetchGroup name definition.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.FetchPlan.DefaultMaxDepth">
      <summary>
            Default value for maximum fetch depth.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.FetchPlan.NoLimit">
      <summary>
            Unlimited retrieval of objects in one fetch operation.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.FetchPlan.DefaultLimit">
      <summary>
            Default value for retrieval of objects in one fetch operation.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.FetchPlan.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.FetchPlan.#ctor(System.String[],System.Int32,System.Int32)">
      <summary>
            Creates a new instance.
            </summary>
      <param name="fetchGroups">
            The FetchGroup array consists of FetchGroup name that has to be defined as
            <see cref="T:Telerik.OpenAccess.FetchFieldAttribute">[FetchField(groupName)]</see>
            at the field of a class that you want to fetch. 
            <c>FetchPlan.Default</c> or <c>FetchPlan.All</c> is also possible.
            </param>
      <param name="maxDepth">
            Controls the maximum tree depth for an object to be fetched.
            This assigns the value of the <see cref="P:Telerik.OpenAccess.FetchPlan.MaxDepth">MaxDepth</see> 
            property.
            </param>
      <param name="limit">
            Value for retrieval of objects in one fetch operation.
            This assigns the value of the <see cref="P:Telerik.OpenAccess.FetchPlan.Limit">Limit</see>  
            property. 
            </param>
    </member>
    <member name="M:Telerik.OpenAccess.FetchPlan.Add(System.String)">
      <summary>
            Adds a FetchGroup name to the actual FetchPlan definition.
            </summary>
      <param name="groupName">
            The FetchGroup name has to be defined as
            <see cref="T:Telerik.OpenAccess.FetchFieldAttribute">[FetchField(groupName)]</see>
            at the field of a class that you want to fetch. 
            <c>FetchPlan.Default</c> or <c>FetchPlan.All</c> is also possible.
            </param>
      <returns>
            Returns the changed FetchPlan. You can call:
            <c>scope.FetchPlan.Add("grp1").Add("grp2")...</c> several times.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.FetchPlan.Remove(System.String)">
      <summary>
            Removes a FetchGroup name from the actual FetchPlan definition.
            </summary>
      <param name="groupName">
            The FetchGroup name has to be defined as
            <see cref="T:Telerik.OpenAccess.FetchFieldAttribute">[FetchField(groupName)]</see>
            at the field of a class that you want to fetch.
            <c>FetchPlan.Default</c> or <c>FetchPlan.All</c> is also possible.
            </param>
      <returns>
            Returns the changed FetchPlan. You can call:
            <c>scope.FetchPlan.Remove("grp1").Remove("grp2")...</c> several times.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.FetchPlan.Clear">
      <summary>
            Clears the actual FetchPlan definition.
            </summary>
      <returns>
            Returns the changed FetchPlan. You can call:
            <c>scope.FetchPlan.Clear().Add("grp1").Add("grp2")...</c> several times.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.FetchPlan.Set(System.String)">
      <summary>
            Replaces the actual FetchPlan by a single FetchGroup name.
            </summary>
      <param name="groupName">
            The FetchGroup name has to be defined as
            <see cref="T:Telerik.OpenAccess.FetchFieldAttribute">[FetchField(groupName)]</see>
            at the field of a class that you want to fetch.
            <c>FetchPlan.Default</c> or <c>FetchPlan.All</c> is also possible.
            </param>
      <returns>
            Returns the changed FetchPlan. You can call:
            <c>scope.FetchPlan.Set("grp0").Add("grp1").Add("grp2")...</c> several times.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.FetchPlan.Set(System.String[])">
      <summary>
            Replaces the actual FetchPlan by an string array of FetchGroup names.
            </summary>
      <param name="groupNames">
            The FetchGroup names has to be defined as
            <see cref="T:Telerik.OpenAccess.FetchFieldAttribute">[FetchField(groupName)]</see>
            at the field of a class that you want to fetch.
            <c>FetchPlan.Default</c> or <c>FetchPlan.All</c> is also possible.
            </param>
      <returns>
            Returns the changed FetchPlan. You can call:
            <c>scope.FetchPlan.Set(groupName).Add("grp1").Remove("grp2")...</c> several times.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.FetchPlan.GetGroupNames">
      <summary>
            Gets the actual FetchPlan definition.
            </summary>
      <returns>
            The FetchGroup names have to be defined as
            <see cref="T:Telerik.OpenAccess.FetchFieldAttribute">[FetchField(groupName)]</see>
            at the field of a class that you want to fetch.
            <c>FetchPlan.Default</c> or <c>FetchPlan.All</c> is also possible.
            </returns>
    </member>
    <member name="P:Telerik.OpenAccess.FetchPlan.Limit">
      <summary>
            Controls the maximum number of objects that can be fetched together.
            </summary>
      <value>
            An integer <c>&gt;=0</c>. 0 means no limit! The default value is <see cref="F:Telerik.OpenAccess.FetchPlan.DefaultLimit" />.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.FetchPlan.MaxDepth">
      <summary>
            Controls the maximum tree depth that is fetched together.
            </summary>
      <value>
            An integer <c>&gt;=1</c>. Default is <see cref="F:Telerik.OpenAccess.FetchPlan.DefaultMaxDepth" />. 
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.IDataObjectKey">
      <summary>
             The IDataObjectKey can be used to bind objects with internal id or version field to web ui elements.
             </summary>
    </member>
    <member name="P:Telerik.OpenAccess.IDataObjectKey.DataObjectKey">
      <summary>
            Returns a string representation of the id and version fields
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.DataObjectKey">
      <summary>
            Id and version handling
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.DataObjectKey.Obtain(System.Object)">
      <summary>
            Gets the string representaion of id and version information
            </summary>
      <param name="persistenceCapable"> The persistent object.</param>
      <returns>String representation of id and version.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.DataObjectKey.Check(System.String,Telerik.OpenAccess.IObjectContext)">
      <summary>
            Retrieves an objects and checks the database version against the given version
            </summary>
      <exception cref="T:Telerik.OpenAccess.Exceptions.NoSuchObjectException">
            The object has been delete in the meantime.
            </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.ConcurrencyControlException">
            The object has been changed in the meantime.
            </exception>
      <param name="key">The key generated by <see cref="M:Telerik.OpenAccess.DataObjectKey.Obtain(System.Object)" />.</param>
      <param name="objectContext">The <see cref="T:Telerik.OpenAccess.IObjectScope" /> or <see cref="T:Telerik.OpenAccess.ObjectContainer" /> to load the data from.</param>
      <returns>The persistent object.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.DataObjectKey.Interpret(System.String,System.String@)">
      <summary>
            Generates an IObjectId instance from the key and gives back the version information.
            </summary>
      <param name="key">The key generated by <see cref="M:Telerik.OpenAccess.DataObjectKey.Obtain(System.Object)" />.</param>
      <param name="version">Out parameter that gives back the version information from the key.</param>
      <returns>An <see cref="T:Telerik.OpenAccess.IObjectId" /> instance that can be used to load the real object.</returns>
    </member>
    <member name="T:Telerik.OpenAccess.IDBObjectEnumerator">
      <summary>
            Interface for enumerators on persistent database objects.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.IMovableEnumerator">
      <summary>
            Interface for enumerator objects which can be positioned freely.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.IMovableEnumerator.Move(System.Int32)">
      <summary>
            Moves the enumerator forwards or backwards by a specified
            number of elements.
            </summary>
      <param name="relative">If greater <c>0</c>, the enumerator
            is moved forwards by the specified number of elements. 
            If less than <c>0</c>, the enumerator is moved backwards.</param>
      <returns>Returns <c>true</c> if the enumerator was 
            successfully moved to an 
            object; <c>false</c> if the enumerator could not be positioned.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.IMovableEnumerator.MoveToEnd">
      <summary>
            Moves the enumerator behind the last object.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.IMovableEnumerator.Count">
      <summary>
            Returns the number of objects of the underlying source 
            of this enumerator.
            </summary>
      <value>Number of objects.</value>
    </member>
    <member name="M:Telerik.OpenAccess.IDBObjectEnumerator.MoveToObject(System.Object)">
      <summary>
            Moves the enumerator to the specified persistent object.
            </summary>
      <param name="persistentObject">
            The persistent object to move to.</param>
      <returns>Returns <c>true</c> if the enumerator was 
            successfully moved to the
            object (the object was found); <c>false</c> if the enumerator 
            could not be positioned.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.IDBObjectEnumerator.MoveToObject(Telerik.OpenAccess.IObjectId)">
      <summary>
             Moves the enumerator to the persistent object with the specified
             database object id.
             </summary>
      <param name="oid">The id of the persistent object to move to.
            </param>
      <returns>Returns <c>true</c> if the enumerator was 
             successfully moved to the
             object (the object was found); <c>false</c> if the enumerator 
             could not be positioned.
             </returns>
    </member>
    <member name="T:Telerik.OpenAccess.IInstanceCallbacks">
      <summary>Interface that provides callback methods 
             for life cycle events of persistent objects.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.IInstanceCallbacks.PostLoad">
      <summary>
            Called after the persistent values are loaded from 
            the database into this instance.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.IInstanceCallbacks.PreRemove(Telerik.OpenAccess.IObjectScope)">
      <summary>
            Called before the instance is removed.
            </summary>
      <param name="objectScope">The object scope where the change 
            occures.</param>
    </member>
    <member name="M:Telerik.OpenAccess.IInstanceCallbacks.PreStore">
      <summary>
            Called before the values are stored from this instance to the
            database.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.InitOperation">
      <summary>
            Describes the reason why transient fields were initialized.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.InitOperation.Constructed">
      <summary>
            Object was constructed.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.InitOperation.Hollow">
      <summary>
            Object was hollowed.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.InitOperation.Refresh">
      <summary>
            Object was refreshed.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.InitOperation.Retrieve">
      <summary>
            Object was retrieved.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.InitOperation.CopyFrom">
      <summary>
            Object was copied into ObjectContainer.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.InitOperation.Apply">
      <summary>
            Object from ObjectContainer was applied.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.IInitializeTransients">
      <summary>
            Interface that provides a callback when transient fields are initialized.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.IInitializeTransients.InitializeTransients(Telerik.OpenAccess.InitOperation)">
      <summary>
            Called when transient fields of an object are to be initialized.
            </summary>
      <param name="initOperation">The reason why the initialization is required.</param>
    </member>
    <member name="T:Telerik.OpenAccess.IObjectContext">
      <summary>
            Common interface of IObjectScope and ObjectContainer.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectContext.Add(System.Object)">
      <summary>
            Marks an object of a persistence-capable class to be added to
            the database context. 
            </summary>
      <param name="persistenceCapableObject">Instance of a persistence 
            capable class. It can also be an IEnumerable of objects to add.</param>
      <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
            The type of <paramref name="persistenceCapableObject" /> was not marked as 
            [Persistent] or was not enhanced.
            </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction is not running (IObjectScope implementation).
            </exception>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectContext.Remove(System.Object)">
      <summary>
             Marks an object from this context as 'deleted' and to be
             removed from the database.
             </summary>
      <param name="persistentObject">Persistent object which 
             must be known to the context before. It can also be an IEnumerable of objects to remove.</param>
      <exception cref="T:Telerik.OpenAccess.OpenAccessException">Instance not known in this context 
             (is transient or managed by
             another object context).</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
             Transaction is not running (IObjectScope implementation).
             </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
             The type of <paramref name="persistentObject" /> was not marked as 
             [Persistent] or is not enhanced.
            </exception>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectContext.MakeDirty(System.Object,System.String)">
      <summary>
            Marks a field of an object from this context manually as 'dirty' and to be updated
            in the database context. Must be called before modifications occur.
            </summary>
      <param name="persistentObject">The object that should 
            be marked as dirty. It can also be an IEnumerable of objects to mark as dirty.</param>
      <param name="fieldName">The field that should 
            be marked as dirty.</param>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction is not running (IObjectScope implementation).
            </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
            The type of <paramref name="persistentObject" /> was not marked as 
            [Persistent]
            or is not enhanced.
            </exception>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectContext.IsDirty(System.Object)">
      <summary>
            Indicates whether the state of a persistent object in 
            this context is 'dirty' / to be updated.
            </summary>
      <param name="persistentObject">The object to be checked.</param>
      <returns>
        <c>true</c> if the object was modified (marked as dirty); 
            <c>false</c> otherwise.</returns>
      <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
            The type of <paramref name="persistentObject" /> was not marked as 
            [Persistent] or is not enhanced.
            </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction is not running (IObjectScope implementation).
            </exception>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectContext.IsRemoved(System.Object)">
      <summary>
             Indicates whether the state of a persistent object in 
             this context is 'deleted' / to be deleted.
             </summary>
      <param name="persistentObject">The object to be checked.</param>
      <returns>
        <c>true</c> if the object was deleted (marked as deleted); 
             <c>false</c> otherwise.</returns>
      <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
            The type of <paramref name="persistentObject" /> was not marked as 
            [Persistent] or is not enhanced.
            </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
             Transaction is not running (IObjectScope implementation).
             </exception>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectContext.IsNew(System.Object)">
      <summary>
             Indicates whether the state of a persistent object in 
             this context is 'new' / to be inserted.
             </summary>
      <param name="persistentObject">The object to be checked.</param>
      <returns>
        <c>true</c> if the object was added (marked as added); 
             <c>false</c> otherwise.</returns>
      <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
            The type of <paramref name="persistentObject" /> was not marked as 
            [Persistent] or is not enhanced.
            </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
             Transaction is not running (IObjectScope implementation).
             </exception>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectContext.IsHollow(System.Object)">
      <summary>
            Indicates whether an object is hollow, i.e., its content 
            is empty and not yet filled from the database.
            </summary>
      <param name="persistentObject">The object where the hollow state should 
            be returned for.</param>
      <returns>Returns <c>true</c> if the object is hollow;
            otherwise <c>false</c>.</returns>
      <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
            The type of <paramref name="persistentObject" /> was not marked as 
            [Persistent] or is not enhanced.
            </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction is not running (IObjectScope implementation).
            </exception>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectContext.GetObjectId(System.Object)">
      <summary>
            Returns the database identity for a persistent object.
            </summary>
      <param name="persistentObject">The instance whose identity is 
            requested.</param>
      <returns>The database object ID of the instance or <c>null</c>
            if <paramref name="persistentObject" /> does not belong to this context or 
            is not enhanced.</returns>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction is not running (IObjectScope implementation).
            </exception>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectContext.GetObjectById(Telerik.OpenAccess.IObjectId)">
      <summary>
            Retrieves the instance which is associated with the given 
            database object ID from this context.
            </summary>
      <returns>The instance with the specified <paramref name="objectId" />.
            </returns>
      <param name="objectId">The database identity object.</param>
      <exception cref="T:Telerik.OpenAccess.Exceptions.NoSuchObjectException">
            The object is deleted.</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction is not running (IObjectScope implementation).
            </exception>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectContext.Evict(System.Object)">
      <summary>
            Marks a persistent object as no longer needed in the transaction 
            cache. This is a hint to the implementation.
            </summary>
      <param name="persistentObject">The instance to evict from the cache. It can also be an IEnumerable of objects to evict.
            </param>
    </member>
    <member name="P:Telerik.OpenAccess.IObjectContext.Transaction">
      <summary>
            Gets the associated transaction instance.
            </summary>
      <value>The associated transaction instance.</value>
    </member>
    <member name="P:Telerik.OpenAccess.IObjectContext.Tracking">
      <summary>
            Gets the associated change tracking interface.
            </summary>
      <value>The associated tracking instance.</value>
    </member>
    <member name="T:Telerik.OpenAccess.IObjectContextProvider">
      <summary>
            Interface that provides the context (IObjectScope) 
            of the specific funtionality.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.IObjectContextProvider.Context">
      <summary>
            Provides the context (IObjectScope) of the query.
            </summary>
      <value>The context (<see cref="T:Telerik.OpenAccess.IObjectScope">IObjectScope</see>)
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.IObjectId">
      <summary>
            Database object identifiers of persistent objects.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.IObjectScope">
      <summary>
            Primary interface for database
            applications and the entry point for executing 
            queries, extent and transaction operations
            containing methods to manage the life cycle of persistent objects.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectScope.Refresh(System.Object)">
      <summary>
            Refreshes the state and values of the persistent object 
            from the database.
            </summary>
      <param name="persistentObject">The instance to refresh or an IEnumerable of instances to refresh.</param>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectScope.GetOqlQuery(System.String)">
      <summary>
            Makes a new oql query object from the specified expression.
            </summary>
      <returns>Returns a query instance, which can be executed.
            </returns>
      <param name="oqlExpression">The oql query expression.
            </param>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectScope.GetOqlQuery``1">
      <summary>
            Makes a new oql query object from the specified type.
            </summary>
      <returns>Returns a query instance, which can be executed.
            </returns>
      <typeparam name="T">The type of the objects to query for.
            </typeparam>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectScope.GetOqlQuery``1(System.String)">
      <summary>
            Makes a new oql query object from the specified expression.
            </summary>
      <param name="oqlExpression">The oql query expression.
            </param>
      <returns>Returns a query instance, which can be executed.
            </returns>
      <exception cref="T:Telerik.OpenAccess.Exceptions.QueryException">
             Result type of the OQL query and T do not match.
            </exception>
      <typeparam name="T">The type of the objects to return.
            </typeparam>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectScope.GetSqlQuery``1(System.String,System.String)">
      <summary>
            Makes a new sql query object from the specified expression.
            </summary>
      <param name="sqlExpression">The sql query expression.
            </param>
      <param name="param">The parameter declarations for the sql 
            expression. 
            </param>
      <returns>Returns a query instance, which can be executed.
            </returns>
      <typeparam name="T">The type of the returned objects.
             </typeparam>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectScope.GetOqlQuery(Telerik.OpenAccess.IQuery)">
      <summary>
            Makes a new oql query object from an exististing query.
            </summary>
      <returns>Returns a query instance, which can be executed.
            </returns>
      <param name="query">The original sql query. 
            </param>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectScope.EnlistTransaction(System.Transactions.Transaction)">
      <summary>
            Enlists this instance in a given transaction.
            </summary>
      <param name="transaction">The <see cref="T:System.Transactions.Transaction" /> that enlists this instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transaction" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="transaction" /> is closed or disposed.</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">The 
            <see cref="P:Telerik.OpenAccess.IDatabaseProperties.TransactionProvider" /> had an incorrect value.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectScope.Retrieve(System.Object)">
      <summary>
            Retrieves an instance from the database. This is a hint to the
            implementation.
            </summary>
      <param name="persistentObject">The object or an IEnumerable of objects to be retrieved.</param>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectScope.GetSqlQuery(System.String,System.Type,System.String)">
      <summary>
            Makes a new sql query object from the specified expression.
            </summary>
      <param name="sqlExpression">The sql query expression.
            </param>
      <param name="result">The type of the instances returned in the 
            query result after query execution.
            </param>
      <param name="param">The parameter declarations for the sql 
            expression. 
            </param>
      <returns>Returns a query instance, which can be executed.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectScope.GetSqlQuery(Telerik.OpenAccess.IQuery)">
      <summary>
            Makes a new sql query object from an exististing query.
            </summary>
      <param name="query">The original sql query. 
            </param>
      <returns>Returns a query instance, which can be executed.
            </returns>
    </member>
    <member name="P:Telerik.OpenAccess.IObjectScope.Database">
      <summary>
            Gets the Database object used to create
            this instance.  
            </summary>
      <value>The database object that created
            this instance.</value>
    </member>
    <member name="P:Telerik.OpenAccess.IObjectScope.TransactionProperties">
      <summary>
            Gets the configuration settings of the 
            transaction. Transaction properties can only be changed 
            if the transaction is not active.
            </summary>
      <value>Transaction properties object.</value>
    </member>
    <member name="P:Telerik.OpenAccess.IObjectScope.FetchPlan">
      <summary>
            Gets and Sets the actual Fetch Plan. 
            You can change the Fetch Plan definition at any time.
            </summary>
      <value>Fetch Plan instance.</value>
    </member>
    <member name="T:Telerik.OpenAccess.IPersistentBehavior">
      <summary>
            Defines how add and remove on a list should be handled with regards to the database.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.IPersistentBehavior.AddBehaviour">
      <summary>
            Defines how add on a list should be handled with regards to the database.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.IPersistentBehavior.DeleteBehaviour">
      <summary>
            Defines how remove on a list should be handled with regards to the database.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.PersistenceBehavior">
      <summary>
            Enum to define the persistent bahavior of list add and remove calls.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.PersistenceBehavior.Persistent">
      <summary>
            The add or remove call should be reflected in the 
            database by inserting or deleting the data.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.PersistenceBehavior.NonPersistent">
      <summary>
            The add or remove call should not be reflected in the 
            database.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.IQuery">
      <summary>
            Interface for executing queries.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.IQuery.Compile">
      <summary>
            Compiles the query to the native query format, e.g. SQL.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.IQuery.Execute">
      <summary>
            Executes the specified query and returns the result.
            This method can only be used for queries without parameters.
            </summary>
      <returns>The result of the query execution.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.IQuery.Execute(System.Object[])">
      <summary>
            Executes the specified query using the parameters passed
            and returns the result.
            </summary>
      <param name="args">The query parameters to use.</param>
      <returns>The result of the
             query execution.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.IQuery.Prefetch(System.Int32)">
      <summary>
            Applies prefetch settings to the uncompiled query.
            </summary>
      <param name="count">The prefetch value to be used.
            </param>
      <returns>The query with applied prefetch settings.</returns>
      <exception cref="T:System.InvalidOperationException">Query result has
            already been calculated.</exception>
    </member>
    <member name="P:Telerik.OpenAccess.IQuery.ForwardsOnly">
      <summary>
            Determines whether the query result can be traversed
            forwards only, or if random access is possible.
            </summary>
      <value>True, if the query result can be traversed.
            forwards only</value>
    </member>
    <member name="P:Telerik.OpenAccess.IQuery.IgnoreUncommitted">
      <summary>
            This property determines whether the query execution is allowed 
            to ignore the changes made in the current transaction, e.g. 
            return objects which have been deleted in the current transaction.
            </summary>
      <value>True, if uncommitted changes can be ignored.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.IQuery.MaxResultCount">
      <summary>
            Limits the maximum number of instances to return by query execution.
            result.
            </summary>
      <value>The maximum number of instances to return by query execution.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.IQuery.Expression">
      <summary>
            Provides the query expression from which this query was created.
            </summary>
      <value>The query expression.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.IQuery.BackendQuery">
      <summary>
            Gets the generated backend query expression (e.g. SQL).
            </summary>
      <value>The native query expression.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.IQuery.RootType">
      <summary>
            Gets the root type of the query result when the query returns only
            instances of a persistence-capable classes.
            </summary>
      <value>
            The root type of the instances delivered by this query, or <c>null</c>.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.IQuery.ParallelFetch">
      <summary>
            Controls whether parallel result fetching is allowed.
            </summary>
      <value>
        <c>True</c> when parallel result fetching is allowed, <c>false</c> otherwise.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.IQuery.Skip">
      <summary>
            Controls the amount of data which is to be skipped before results are fetched.
            </summary>
      <value>Amount of data to skip. (Default:0)</value>
    </member>
    <member name="T:Telerik.OpenAccess.IQueryResult">
      <summary>
            Result of a database query execution.
            The result has to be disposed. 
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.IQueryResult.GetEnumerator">
      <summary>
            Returns a moveable enumerator to enumerate the query result objects.
            </summary>
      <returns>New enumerator for the query result.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.IQueryResult.Prefetch(System.Int32)">
      <summary>Prefetches a speicified amount of result elements.</summary>
      <returns>See <see cref="M:Telerik.OpenAccess.IQuery.Prefetch(System.Int32)" /></returns>
      <param name="count">See <see cref="M:Telerik.OpenAccess.IQuery.Prefetch(System.Int32)" /></param>
    </member>
    <member name="M:Telerik.OpenAccess.IQueryResult.GetTotalCount">
      <summary>
            Obtains the total number of results in a paging-independend fashion.
            </summary>
      <returns>The total number of results.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.IQueryResult.ToList">
      <summary>
            Resolves the complete result and adds it to an ArrayList
            </summary>
      <returns>ArrayList with the complete fetched result.</returns>
    </member>
    <member name="P:Telerik.OpenAccess.IQueryResult.Context">
      <summary>
            Returns the context in which the query was executed.
            </summary>
      <value>
            The IObjectContext of the query result.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.IQueryResult.OutParameter">
      <summary>
            Returns a dictionary containing the stored procedure out parameter values.
            </summary>
      <value>
            Dictionary of out parameter values by name.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.IQueryResult.RootType">
      <summary>
            Gets the root type of the query result when the query returns only
            instances of a persistence-capable classes.
            </summary>
      <value>
            The root type of the instances delivered by this query, or <c>null</c>.
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.ITracking">
      <summary>
            Provides change tracking events for modifications of persistent objects.
            </summary>
    </member>
    <member name="E:Telerik.OpenAccess.ITracking.Changing">
      <summary>
            Occurs before a field of a persistent object is changed by the application.
            </summary>
    </member>
    <member name="E:Telerik.OpenAccess.ITracking.Changed">
      <summary>
            Occurs after a field of a persistent object has been changed by the application.
            </summary>
    </member>
    <member name="E:Telerik.OpenAccess.ITracking.Adding">
      <summary>
            Occurs before a persistent object is added to the object context.
            </summary>
    </member>
    <member name="E:Telerik.OpenAccess.ITracking.Added">
      <summary>
            Occurs after an object was marked as to be persisted by the object context.
            </summary>
    </member>
    <member name="E:Telerik.OpenAccess.ITracking.Removing">
      <summary>
            Occurs before a persistent object is removed from the object context.
            </summary>
    </member>
    <member name="E:Telerik.OpenAccess.ITracking.Removed">
      <summary>
            Occurs after a persistent object was marked as to be removed from the object context.
            </summary>
    </member>
    <member name="E:Telerik.OpenAccess.ITracking.Refreshing">
      <summary>
            Occurs before a persistent object is refreshed from the database.
            </summary>
    </member>
    <member name="E:Telerik.OpenAccess.ITracking.Refreshed">
      <summary>
            Occurs after a persistent object was refreshed from the database.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.ChangeEventHandler">
      <summary>
            Represents the method that will handle the Changing and Changed events.
            </summary>
      <param name="sender">The source of the event, either a <see cref="T:Telerik.OpenAccess.IObjectScope" /> instance
            or an <see cref="T:Telerik.OpenAccess.ObjectContainer" /> instance.</param>
      <param name="e">A <see cref="T:Telerik.OpenAccess.ChangeEventArgs" /> containing the data for the event.</param>
    </member>
    <member name="T:Telerik.OpenAccess.AddEventHandler">
      <summary>
            Represents the method that will handle the Adding and Added events.
            </summary>
      <param name="sender">The source of the event, either a <see cref="T:Telerik.OpenAccess.IObjectScope" /> instance
            or an <see cref="T:Telerik.OpenAccess.ObjectContainer" /> instance.</param>
      <param name="e">A <see cref="T:Telerik.OpenAccess.AddEventArgs" /> containing the data for the event.</param>
    </member>
    <member name="T:Telerik.OpenAccess.RemoveEventHandler">
      <summary>
            Represents the method that will handle the Removing and Removed events.
            </summary>
      <param name="sender">The source of the event, either a <see cref="T:Telerik.OpenAccess.IObjectScope" /> instance
            or an <see cref="T:Telerik.OpenAccess.ObjectContainer" /> instance.</param>
      <param name="e">A <see cref="T:Telerik.OpenAccess.RemoveEventArgs" /> containing the data for the event.</param>
    </member>
    <member name="T:Telerik.OpenAccess.RefreshEventHandler">
      <summary>
            Represents the method that will handle the Refreshing and Refreshed events.
            </summary>
      <param name="sender">The source of the event, either a <see cref="T:Telerik.OpenAccess.IObjectScope" /> instance
            or an <see cref="T:Telerik.OpenAccess.ObjectContainer" /> instance.</param>
      <param name="e">A <see cref="T:Telerik.OpenAccess.RefreshEventArgs" /> containing the data for the event.</param>
    </member>
    <member name="T:Telerik.OpenAccess.PersistenceEventArgs">
      <summary>
            Base class for change tracking events of persistent objects.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.PersistenceEventArgs.#ctor(System.Object)">
      <summary>Constructs a new instance.</summary>
      <param name="pc">The tracked persistent object.</param>
    </member>
    <member name="P:Telerik.OpenAccess.PersistenceEventArgs.PersistentObject">
      <summary>
            Gets the persistent object the event was fired for.
            </summary>
      <value>
            The persistent object which has changed it's state or value.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.PersistenceEventArgs.Finished">
      <summary>
            Indicates whether the event action is starting or finished.
            </summary>
      <value>
        <c>True</c> when the event action is finished.</value>
    </member>
    <member name="P:Telerik.OpenAccess.PersistenceEventArgs.Tag">
      <summary>
            Gets or sets a user defined value.
            </summary>
      <value>Application defined value.</value>
    </member>
    <member name="T:Telerik.OpenAccess.AddEventArgs">
      <summary>
            Provides data for the Adding and Added events.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.AddEventArgs.#ctor(System.Object)">
      <summary>
            Constructs a new instance.
            </summary>
      <param name="o">The persistent object.</param>
    </member>
    <member name="T:Telerik.OpenAccess.RemoveEventArgs">
      <summary>
            Provides data for the Removing and Removed events.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.RemoveEventArgs.#ctor(System.Object)">
      <summary>
            Constructs a new instance.
            </summary>
      <param name="o">The persistent object.</param>
    </member>
    <member name="T:Telerik.OpenAccess.RefreshEventArgs">
      <summary>
            Provides data for the Refreshing and Refreshed events.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.RefreshEventArgs.#ctor(System.Object)">
      <summary>
            Constructs a new instance.
            </summary>
      <param name="o">The persistent object.</param>
    </member>
    <member name="T:Telerik.OpenAccess.ChangeEventArgs">
      <summary>
            Provides data for the Changing and Changed events.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ChangeEventArgs.#ctor(System.Object,System.String,System.Object,System.Object,System.Boolean)">
      <summary>
            Constructs a new instance.
            </summary>
      <param name="pc">The persistent object.</param>
      <param name="fld">The field name or an invalid field name when a change
            event occurs for an internal field (like hidden inverse reference).</param>
      <param name="newV">The new value of the field.</param>
      <param name="oldV">The old value of the field.</param>
      <param name="was">True if the object was dirty before.</param>
    </member>
    <member name="P:Telerik.OpenAccess.ChangeEventArgs.FieldName">
      <summary>
            Get the name of the changed field.
            </summary>
      <value>The name of the field or an invalid field name.</value>
    </member>
    <member name="P:Telerik.OpenAccess.ChangeEventArgs.OldValue">
      <summary>
            Gets the old value of the changing/changed field.
            </summary>
      <value>Old value of the field.</value>
    </member>
    <member name="P:Telerik.OpenAccess.ChangeEventArgs.NewValue">
      <summary>
            Gets the new value of the changing/changed field.
            </summary>
      <value>New value of the field.</value>
    </member>
    <member name="P:Telerik.OpenAccess.ChangeEventArgs.WasDirty">
      <summary>
            Indicates whether the persistent object was marked as dirty before.
            </summary>
      <value>
        <c>True</c> when the instance was marked as dirty before.</value>
    </member>
    <member name="T:Telerik.OpenAccess.LockMode">
      <summary>
            Specification of a pessimistic lock.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.LockMode.READ">
      <summary>
            Locks for read access. This is a shared lock, it conflicts with  
            exclusive locks of other transactions.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.LockMode.WRITE">
      <summary>
            Locks for write access. This is an exclusive lock, it conflicts 
            with any locks of other transactions. It also inhibits
            write or delete operations of other transactions.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.LockMode.DELETE">
      <summary>
            deprecated; behaves identical like WRITE
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.ITransaction">
      <summary>
            Database transaction interface.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ITransaction.Begin">
      <summary>
            Begins the transaction. If the transaction is already active,
            a new nesting level ist started.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Concurrency property is wrong.</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Associated IObjectScope object was disposed.
            </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">
            Using System.Transactions prohibits this method.
            </exception>
    </member>
    <member name="M:Telerik.OpenAccess.ITransaction.Commit">
      <summary>
            Commits the transaction on the current nesting level. 
            In case of exceptions, the transaction is implicitly rolled back.
            </summary>
      <exception cref="T:Telerik.OpenAccess.Exceptions.DuplicateKeyException">
            When an unique index is violated.
            </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.DataStoreException">
            When there is a insufficient disk
            space condition or a disk writing failure.</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotAccessibleException">
            When there is an access rights
            violation.</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.OptimisticVerificationException">
            When a concurrency control conflict occured.
            </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction was not started before.
            </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">
            Using System.Transactions prohibits this method.
            </exception>
    </member>
    <member name="M:Telerik.OpenAccess.ITransaction.Rollback">
      <summary>
            Rolls back this transaction on the current nesting level.
            </summary>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction was not started before.
            </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">
            Using System.Transactions prohibits this method.
            </exception>
    </member>
    <member name="M:Telerik.OpenAccess.ITransaction.Flush">
      <summary>
            Flush all dirty and new instances to the database and evict all
            instances from the local cache.
            </summary>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction was not started before.
            </exception>
      <exception cref="T:Telerik.OpenAccess.OpenAccessException">
            Transaction is not at level 1.
            </exception>
    </member>
    <member name="M:Telerik.OpenAccess.ITransaction.Lock(System.Object,Telerik.OpenAccess.LockMode)">
      <summary>
            Sets a pessimistic lock on the specified object or collection
            elements. Might throw a LockNotGrantedException.
            </summary>
      <param name="targetObject">The persistent object to be locked or an
            ICollection containing persistent objects to be locked.
            </param>
      <param name="mode">The lock to be applied.</param>
      <exception cref="T:Telerik.OpenAccess.Exceptions.LockNotGrantedException">
            When the specified lock could not be obtained.</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction was not started before.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.ITransaction.Objects``1(Telerik.OpenAccess.ObjectState)">
      <summary>
            Returns a read-only snapshot view of all objects of the specified type and state.
            </summary>
      <returns>
            A read-only snapshot view of all objects of the specified type in the requested state.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">When an attempt is made to obtain all
            clean and hollow objects when this is not possible.</exception>
      <param name="state">The state of the objects to be returned.</param>
      <typeparam name="T">The type of the objects to be returned.</typeparam>
    </member>
    <member name="P:Telerik.OpenAccess.ITransaction.IsActive">
      <summary>
            Indicates whether the transaction is currently active, i.e., the 
            transaction has
            been begun but not yet been committed or rolled back.
            </summary>
      <value>
        <c>true</c> if transaction is running, <c>false</c>, 
            if transaction is not running</value>
    </member>
    <member name="P:Telerik.OpenAccess.ITransaction.Level">
      <summary>
            Gets the current nesting level of the transaction. 
            </summary>
      <value>Current transaction level if transaction is active or
            <c>0</c> if transaction is inactive.</value>
    </member>
    <member name="P:Telerik.OpenAccess.ITransaction.IsDirty">
      <summary>
            Indicates whether modifications (updates, deletes, inserts)
            have been made in the transaction.
            </summary>
      <value>
        <c>true</c>, if modifications have been made.</value>
    </member>
    <member name="P:Telerik.OpenAccess.ITransaction.DirtyObjects">
      <summary>
            Returns all objects which have been modified in the 
            transaction. 
            </summary>
      <value>An instance of System.Colections.IList containing all
            updated, deleted and newly inserted objects.</value>
    </member>
    <member name="P:Telerik.OpenAccess.ITransaction.IsManaged">
      <summary>
            Indicates whether the transaction is managed.
            </summary>
      <value>
        <c>true</c> if the transaction is managed; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Telerik.OpenAccess.ITransactionProperties">
      <summary>
            Controls the properties of a database transaction. 
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ITransactionProperties.RetainValues">
      <summary>
            Controls whether persistent objects retain their values after 
            commit of the transaction and if read access is allowed. 
            Default is true.
            </summary>
      <value>Default is <c>true</c>.</value>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionException">
            Transaction is active.</exception>
    </member>
    <member name="P:Telerik.OpenAccess.ITransactionProperties.RestoreValues">
      <summary>
            Controls whether the values of persistent objects are restored
            to their original values when the transaction 
            (or one particular nesting level) is rolled back. 
            Default is false.
            </summary>
      <value>Default is <c>false</c>.</value>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionException">
            Transaction is active.</exception>
    </member>
    <member name="P:Telerik.OpenAccess.ITransactionProperties.Concurrency">
      <summary>
            Controls the concurrency of the transaction. Default is 
            TransactionMode.OPTIMISTIC_NO_LOST_UPDATES.
            </summary>
      <value>Default is <c>TransactionMode.OPTIMISTIC_NO_LOST_UPDATES</c>.</value>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionException">
            Transaction is active.</exception>
    </member>
    <member name="P:Telerik.OpenAccess.ITransactionProperties.RefreshReadObjectsInNewTransaction">
      <summary>
            Determines, whether objects that were read (but not modified)
            in a previous transaction are refreshed upon the first access
            in a subsequent transaction. Default is True; use with care!
            </summary>
      <value>Default is <c>true</c>.</value>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionException">
            Transaction is active.</exception>
    </member>
    <member name="P:Telerik.OpenAccess.ITransactionProperties.AutomaticBegin">
      <summary>
            Determines, whether a transaction is always active (automatically started).
            </summary>
      <value>The default is <c>false</c>.</value>
    </member>
    <member name="P:Telerik.OpenAccess.ITransactionProperties.FailFast">
      <summary>
            Determines, whether a transaction commit or flush should fail on the first failure.
            </summary>
      <value>The default is <c>true</c>.</value>
    </member>
    <member name="T:Telerik.OpenAccess.ObjectContainer">
      <summary>
        <para>
             Implementation of a container for networks of persistent 
             objects which are disconnected from a database. The 
             ObjectContainer
             implements change tracking and can be used later to reapply
             the offline changes to a database.
            </para>
      </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.#ctor">
      <summary>
            Constructs an empty ObjectContainer.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.Add(System.Object)">
      <summary>
            Inserts an object of a persistence-capable class into 
            this ObjectContainer.
            </summary>
      <param name="obj">The persistence capable object to be added to 
             the ObjectContainer. It can also be an IEnumerable of objects to add.</param>
      <exception cref="T:System.InvalidCastException">When 
             <paramref name="obj" /> is not an instance of a
             persistence-capable class (not marked with the [Persistent]
             attribute or not enhanced).</exception>
      <exception cref="T:System.ArgumentNullException">When 
             <paramref name="obj" /> is <c>null</c>.</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">
             When this instance is set to read-only.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.Remove(System.Object)">
      <summary>
            Marks a persistent object as deleted. 
            </summary>
      <param name="persistent">The object to be removed from 
             the ObjectContainer. It can also be an IEnumerable of objects to remove.
             </param>
      <exception cref="T:System.ArgumentException">
             When <paramref name="persistent" /> is not contained in this
             ObjectContainer.</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">
             When this instance is set to read-only.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.MakeDirty(System.Object,System.String)">
      <summary>
            Marks the field of a persistent object explicitly as dirty. 
            Must be called before modifications occur.
            </summary>
      <param name="persistentObject">The persistent object to be 
            marked as dirty. It can also be an IEnumerable of objects to mark as dirty.</param>
      <param name="fieldName">The field of the persistent object to be 
            marked as dirty.</param>
      <exception cref="T:System.ArgumentException">
            When <paramref name="persistentObject" /> is not contained in this
            ObjectContainer.</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">
            When this instance is set to read-only.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.IsDirty(System.Object)">
      <summary>
            Checks if a persistent object is in the 'DIRTY' state.
            </summary>
      <param name="persistentObject">The object to be checked; 
            must be managed by this
            ObjectContainer.</param>
      <returns>Value <c>true</c> if object has been modified or has been 
             marked dirty explicitly; otherwise <c>false</c>.</returns>
      <exception cref="T:System.ArgumentException">
             When <paramref name="persistentObject" /> is not contained in this
             ObjectContainer.</exception>
      <exception cref="T:System.InvalidCastException">When 
             <paramref name="persistentObject" /> is not an instance of a
             persistence-capable class (not marked with the [Persistent]
             attribute or not enhanced).</exception>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.IsRemoved(System.Object)">
      <summary>
            Checks if a persistent object is in the 'DELETED' state.
            </summary>
      <param name="persistentObject">The object to be checked; 
            must be managed by this
            ObjectContainer.</param>
      <returns>Value <c>true</c> if this object has been removed; 
             otherwise <c>false</c>.</returns>
      <exception cref="T:System.ArgumentException">
             When <paramref name="persistentObject" /> is not contained in this
             ObjectContainer.</exception>
      <exception cref="T:System.InvalidCastException">When 
             <paramref name="persistentObject" /> is not an instance of a
             persistence-capable class (not marked with the [Persistent]
             attribute or not enhanced).</exception>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.IsNew(System.Object)">
      <summary>
            Checks if a persistent object is in the 'NEW' state.
            </summary>
      <param name="persistentObject">The object to be checked; 
            must be managed by this
            ObjectContainer.</param>
      <returns>Value <c>true</c> if the object has been inserted; 
             otherwise <c>false</c>.</returns>
      <exception cref="T:System.ArgumentException">
             When <paramref name="persistentObject" /> is not contained in this
             ObjectContainer.</exception>
      <exception cref="T:System.InvalidCastException">When 
             <paramref name="persistentObject" /> is not an instance of a
             persistence-capable class (not marked with the [Persistent]
             attribute or not enhanced).</exception>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.IsHollow(System.Object)">
      <summary>
             Checks if a persistent object is in the 'DETACHED' state 
             and therefore its values cannot be read (is hollow).
             </summary>
      <param name="persistentObject">The object to checked; 
             must be managed by this
             ObjectContainer.</param>
      <returns>Value <c>true</c> if the object is actually a detached
             hollow object whose values cannot be read.</returns>
      <exception cref="T:System.ArgumentException">
             When <paramref name="persistentObject" /> is not contained in this
             ObjectContainer.</exception>
      <exception cref="T:System.InvalidCastException">When 
             <paramref name="persistentObject" /> is not an instance of a
             persistence-capable class (not marked with the [Persistent]
             attribute or not enhanced).</exception>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.GetObjectId(System.Object)">
      <summary>
            Returns the database object ID for the passed 
            persistent object.
            </summary>
      <param name="persistentObject">The persistent object of which the 
            database object ID is requested.</param>
      <returns>Database identity object.</returns>
      <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
        <paramref name="persistentObject" /> is not 
            persistence capable (not enhanced or class is not declared
            [Persistent]
            </exception>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.GetObjectById(Telerik.OpenAccess.IObjectId)">
      <summary>
            Returns the persistent object with the given database object ID.
            </summary>
      <param name="oid">The database object identity object.</param>
      <returns>Persistent object having the passed object ID from 
            this ObjectContainer 
            or <c>null</c> if the object is not available from this
            ObjectContainer.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.Evict(System.Object)">
      <summary>
            Marks a persistent object as no longer needed in the object container.
            </summary>
      <param name="persistent">The instance to evict from the container. It can also be an IEnumerable of objects to evict.
            </param>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.ChangeObjectId(System.Object,Telerik.OpenAccess.IObjectId)">
      <summary>
            Changes the id of a persistent object to another database object ID. 
            </summary>
      <param name="persistentObject">Object contained 
            in this writable ObjectContainer 
            whose OID is to be changed.</param>
      <param name="newIdObj">The new database object ID.</param>
      <exception cref="T:System.ArgumentException">
            When <paramref name="persistentObject" /> is not contained in this
            ObjectContainer.</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">
            When this instance is set to read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
            When <paramref name="newIdObj" /> is not given.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            When <paramref name="newIdObj" /> is not valid.</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">
            When the state of <paramref name="persistentObject" /> 
            is not <c>NEW</c>.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.ToString">
      <summary>
            Returns a string describing all contained objects for 
            debugging purposes.
            </summary>
      <returns>Returns a string with a description of the state of 
            all contained objects.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.GetListNames">
      <summary>
            Returns an enumerator for all known list names.
            </summary>
      <returns>New enumerator instance of string values.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.NamedList(System.String)">
      <summary>
            Get an IList that is registered by the id 'name'.
            </summary>
      <param name="listName">An name of a registered IList</param>
      <returns>An instance of IList or <c>null</c>.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.NamedList(System.String,System.Boolean)">
      <summary>
            Get an IList that is registered by the id 'name'.
            </summary>
      <param name="listName">An name of a registered IList</param>
      <param name="implicitCreate">If <c>true</c>, the list will be created if necessary.</param>
      <returns>An instance of IList or <c>null</c>.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.CopyFrom(Telerik.OpenAccess.IObjectScope,System.String,System.Object,Telerik.OpenAccess.IObjectCollector)">
      <summary>
            Creates a copy of each specified persistent root object and adds it to the 
            ObjectContainer.
            </summary>
      <param name="objectScope">The source IObjectScope to copy 
            from.</param>
      <param name="listName">The name of the list under which the added
            objects should be retrievable.
            </param>
      <param name="objectToBeAdded">Persistent object that is to be added to the
            container. Can also be of type IEnumerable or IEnumerator in which case all
            contained objects are added to the container.
            <para>
            In the case where a persistent capable class also implements IEnumerable or
            IEnumerator, the object network for only this class' object is calculated.
            The contained objects are not enumerated.
            </para></param>
      <param name="objectCollector">An implementation of the IObjectCollector interface
            used to calculate the object network for each of the root objects.
            <para>This parameter can be null, in which case only the root objects are added
            to the contatiner.</para></param>
      <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotAccessibleException">
            When the source scope object is not accessible.
            </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.LockNotGrantedException">
            When the source scope transaction mode is pessimistic and the
            object cannot be locked.
            </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.NoSuchObjectException">
            When the source scope object was referenced but is deleted in the
            database.
            </exception>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify)">
      <summary>
            Applies the changes contained in this ObjectContainer to the 
            given IObjectScope using a default merge algorithm which failes
            when a conflict is detected.
            </summary>
      <param name="objectScope">The target IObjectScope to 
            copy to.</param>
      <param name="verifyMode">Specifies which verifiable objects 
            are verified and locked.
            </param>
      <exception cref="T:Telerik.OpenAccess.Exceptions.OptimisticVerificationException">
            When the changes stored in the container cannot be applied to 
            the target object scope because the database content was changed
            concurrently.
            </exception>
      <exception cref="T:Telerik.OpenAccess.OpenAccessException"> When
            an object could not be accessed from the database.
            </exception>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.CommitChanges(Telerik.OpenAccess.ObjectContainer.ChangeSet,Telerik.OpenAccess.ObjectContainer.Verify,Telerik.OpenAccess.IObjectScope,System.Boolean,System.Boolean)">
      <summary>
            Commits the changes of an ObjectContainer into a database.
            </summary>
      <exception cref="T:Telerik.OpenAccess.Exceptions.OptimisticVerificationException">
            When changes have been made in the database concurrently.</exception>
      <param name="changes">The extracted changes of an ObjectContainer.</param>
      <param name="verifyMode">The verification mode to use.</param>
      <param name="targetScope">The target scope with inactive transaction.</param>
      <param name="allFields">Controls whether all fields should be overwritten 
            (usually <c>true</c>).</param>
      <param name="generateUpdateChanges">If <c>true</c>, the return value
            will be calculated; otherwise null is returned.</param>
      <returns>When generateUpdateChanges is <c>true</c>, a change set
            is generated; otherwise <c>null</c>.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.CopyToWithUpdate(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify,System.Boolean)">
      <summary>
            Applies the changes contained in this ObjectContainer to the 
            given IObjectScope using a default merge algorithm which failes
            when a conflict is detected.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify,System.Boolean)">
      <summary>
            Applies the changes contained in this ObjectContainer to the 
            given IObjectScope using a default merge algorithm which failes
            when a conflict is detected. Can protect attributed object fields
            from being overwritten with the ObjectContainer content.
            </summary>
      <param name="objectScope">The target IObjectScope to copy 
            to.</param>
      <param name="verifyMode">Specifies which verifiable objects 
            are verified and locked.</param>
      <param name="allFields">Specifies if all object fields are 
            to be copied; 
             if <c>false</c> copies only fields not marked with the 
            <see cref="T:Telerik.OpenAccess.ObjectContainer.ObjectMergerProtectOverwrite" /> attribute.</param>
      <exception cref="T:Telerik.OpenAccess.Exceptions.OptimisticVerificationException">
            When the changes stored in the container cannot be applied to 
            the target object scope because the database content was changed
            concurrently.
            </exception>
      <exception cref="T:Telerik.OpenAccess.OpenAccessException"> When
            an object could not be accessed from the database.
            </exception>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify,Telerik.OpenAccess.RT.ContainerMerger,System.Collections.ArrayList)">
      <summary>
            Applies the changes contained in this ObjectContainer to the 
            given IObjectScope using a custom ObjectMerger object.
            </summary>
      <param name="objectScope">The target IObjectScope to copy 
            to.</param>
      <param name="verifyMode">Specifies which objects are verified 
            and locked.</param>
      <param name="merger">Specifies how conflicts are resolved and 
            how objects are copied. If 
            <c>null</c> is passed, only verification takes place and the target
            IObjectScope object is not changed.
            </param>
      <param name="InternalChgSet">When given, receives all changes.</param>
      <exception cref="T:Telerik.OpenAccess.Exceptions.OptimisticVerificationException">
            When the changes stored in the container cannot be applied to 
            the target object scope because the database content was changed
            concurrently.
            </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.OptimisticVerificationException">
            When a conflict 
            between container content and database content could not
            be resolved.</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.LockNotGrantedException"> When
            an object could not be locked in the target scope.
            </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotAccessibleException"> When
            an object could not be accessed in the target scope.
            </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException"> When
            an object could not be accessed in the target scope.
            </exception>
      <returns>Indicator whether intermediate commit is required or not.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.Contains(System.Object)">
      <summary>
            Checks if a persistent object is contained by this ObjectContainer.
            </summary>
      <param name="obj">The object to test for.</param>
      <returns>Value <c>true</c> if the object is known; 
            <c>false</c> otherwise</returns>
      <exception cref="T:System.InvalidCastException">When 
            <paramref name="persistentObject" /> is not an instance of a
            persistence-capable class (not marked with the [Persistent]
            attribute or not enhanced).</exception>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.Evict(Telerik.OpenAccess.IObjectId)">
      <summary>
            Evicts a contained clean/proxy object from the container.
            </summary>
      <param name="oid">The database object identity object.</param>
      <exception cref="T:System.ArgumentException">
            When the oid instance is not given.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.GetPersistentVersion(System.Object)">
      <summary>
            Returns the persistent version information for persistent objects. 
            </summary>
      <returns>Version information of the object.</returns>
      <param name="verifiable">The object to verify.</param>
      <exception cref="T:System.ArgumentException">
             When <paramref name="persistentObject" /> is not contained in this
             ObjectContainer.</exception>
      <exception cref="T:System.InvalidCastException">When 
             <paramref name="persistentObject" /> is not an instance of a
             persistence-capable class (not marked with the [Persistent]
             attribute or not enhanced).</exception>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.SetPersistentVersion(System.Object,System.Object)">
      <summary>
            Sets the persistent version stamp for persistent objects of 
            verifiable classes. 
            </summary>
      <exception cref="T:System.ArgumentException">
             Class of <paramref name="verifiable" /> was not marked 
             as <c>Verifiable</c> during enhancement.
             </exception>
      <param name="verifiable">The verifiable object.</param>
      <param name="version">The new version information.</param>
      <exception cref="T:System.ArgumentException">
             When <paramref name="persistentObject" /> is not contained in this
             ObjectContainer.</exception>
      <exception cref="T:System.InvalidCastException">When 
             <paramref name="persistentObject" /> is not an instance of a
             persistence-capable class (not marked with the [Persistent]
             attribute or not enhanced).</exception>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.Extent(System.Type)">
      <summary>
            Provides a read-only snapshot view of the content of this ObjectContainer filtered
            on the type specified.
            </summary>
      <param name="type">The type filter or <c>null</c>.</param>
      <returns>
            Read-only snapshot view of the content of the ObjectContainer
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.Extent``1">
      <summary>
            Provides a read-only snapshot view of the content of this ObjectContainer filtered
            on the type specified.
            </summary>
      <typeparam name="T">The type of the objects to be returned.</typeparam>
      <returns>
            Read-only snapshot view of the content of the ObjectContainer
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.GetEnumerator">
      <summary>
            Returns an enumerator that can enumerate all objects directly reachable from
            the named sets not marked as to be deleted.
            </summary>
      <returns>New enumerator object.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.GetEnumerator(System.Type)">
      <summary>
            Returns an enumerator that can
            enumerate all objects directly reachable from the named sets not
            marked as to be deleted and of a given class.
            </summary>
      <param name="scope">The class used for scoping.</param>
      <returns>New enumerator object.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.GetAllEnumerator">
      <summary>
            Returns an enumerator that can iterate over all contained objects.
            </summary>
      <returns>New enumerator object.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.GetAllEnumerator(System.Type)">
      <summary>
            Returns an enumerator that can iterate over all contained 
            objects of a given class.
            </summary>
      <param name="scope">The class used for scoping.</param>
      <returns>New enumerator object.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.GetContent">
      <summary>
            Creates a new change set with the current content.
            </summary>
      <returns>
            A serializable object with the current content.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.GetChanges(Telerik.OpenAccess.ObjectContainer.Verify)">
      <summary>
            Creates a new change set with the actual modifications.
            </summary>
      <returns>
            A serializable object containing the current modífications.
            </returns>
      <param name="verificationMode">Controls, which objects must be present
            in the result (all or changed).</param>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.Apply(Telerik.OpenAccess.ObjectContainer.ChangeSet)">
      <summary>
            Updates this instance with the information from a change set.
            </summary>
      <param name="changes">The changes to be applied.</param>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>
            Custom deserialization method implemenation.
            </summary>
      <param name="sender">The deserialization event sender.</param>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implemenation.
            </summary>
      <param name="sinfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom deserialization method implemenation.
            </summary>
      <param name="sinfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectContainer.Transaction">
      <summary>
            Gets the associated transaction instance.
            </summary>
      <value>The associated transaction instance.</value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectContainer.DBConnection">
      <summary>
            Controls the database connection.
            </summary>
      <value>An instance of IDBConnection.</value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectContainer.AutoSync">
      <summary>
            Controls the transactional behaviour of the database connection.
            </summary>
      <value>An instance of IDBConnection.</value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectContainer.IsModified">
      <summary>
            Indicates whether the ObjectContainer was modified.
            </summary>
      <value>
        <c>true</c> if the ObjectContainer was 
            modified, <c>false</c> otherwise.</value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectContainer.IsReadOnly">
      <summary>
            Controls the modification behavior of the ObjectContainer.
            </summary>
      <value>
            If the value is <c>true</c>, modifcations to the container are 
            not allowed. Attempting to modify a container set to 
            read-only results in a 
            <see cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException" />.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectContainer.Count">
      <summary>
            Gets the number of persistent objects
            in the ObjectContainer including proxy objects and objects
            marked as to be deleted.
            </summary>
      <value>The number of persistent objects.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectContainer.Tracking">
      <summary>Gets the associated change tracking interface.</summary>
      <value>The associated tracking instance.</value>
    </member>
    <member name="E:Telerik.OpenAccess.ObjectContainer.ResolveProxy">
      <summary>
            Occurs when the user attempts to access the content of a proxy (hollow) object.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.ObjectContainer.ChangeSet">
      <summary>
            Serializable change set of an ObjectContainer.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectContainer.ChangeSet.format">
      <summary>
            Compatibility information.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectContainer.ChangeSet.changes">
      <summary>
            The binary encoded changes in byte form.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.ChangeSet.#ctor">
      <summary>
            Constructs a new change set.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.ChangeSet.#ctor(System.Object)">
      <summary>
            Constructs a new change set.
            </summary>
      <param name="x">The source object, usually a WSDL generated instance OR <c>null</c>.</param>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.ChangeSet.CopyTo(System.Object)">
      <summary>
            Copies the data of this instance to another.
            </summary>
      <param name="target">Copy target instance.</param>
      <returns>The target instance</returns>
      <exception cref="T:System.Exception">Wrong type of target.</exception>
    </member>
    <member name="T:Telerik.OpenAccess.ObjectContainer.ObjectMergerProtectOverwrite">
      <summary>
            Protects members of persistence capable classes from being 
            overwritten during ObjectContainer.CopyTo() .
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.ObjectContainer.Verify">
      <summary>
            Specification of the conflict detection and resolution for importing 
            objects into an object scope.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectContainer.Verify.All">
      <summary>
            All objects from the object source context will be verified 
            (except new objets).
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectContainer.Verify.Changed">
      <summary>
            Only changed/deleted objects from the object source context will
             be verified.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectContainer.Verify.None">
      <summary>
            No object from the object source context will be verified.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectContainer.Verify.Lock">
      <summary>
            All verified objects from the source context will also get locked.
            The lock mode used depends on action required (read or write/delete).
            The lock will be granted even if the optimistic verification 
            fails (there was
            a concurrent change to the object). 
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.ObjectContainer.ResolveProxyEventArgs">
      <summary>
            Provides data for an object resolution event.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectContainer.ResolveProxyEventArgs.ProxyIdentity">
      <summary>
            Gets the database identities of the proxy instances which are requested to be resolved.
            </summary>
      <value>
            The database object identities for the instances to be resolved.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectContainer.ResolveProxyEventArgs.FieldName">
      <summary>
            Gets the name of the field which was accessed for Read or Write.
            </summary>
      <value>
            The name of the accessed field when read or write access is performed; null otherwise.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectContainer.ResolveProxyEventArgs.Operation">
      <summary>
            Indicates the attempted operation.
            </summary>
      <value>
            Indication of the attempted operation.
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.ObjectContainer.ResolveProxyEventArgs.Action">
      <summary>
            Specification about an attempted operation on proxy instances.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectContainer.ResolveProxyEventArgs.Action.Read">
      <summary>
            A read access was attempted.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectContainer.ResolveProxyEventArgs.Action.Write">
      <summary>
            A write access was attempted.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectContainer.ResolveProxyEventArgs.Action.Delete">
      <summary>
            A delete access was attempted.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.ObjectContainer.ResolveProxyEventHandler">
      <summary>
            Represents the method that will handle the ResolveProxy event.
            </summary>
      <param name="sender">The ObjectContainer instance in which the proxy is managed.</param>
      <param name="e">The ResolveProxyEventArgs instance containing the data for the event.</param>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainerEnumerator.MoveNext">
      <summary>
            Move enumerator to next object.
            </summary>
      <returns>true, if there is a next element; otherwise false</returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainerEnumerator.Reset">
      <summary>
            Moves cursor to the position before the first element.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectContainerEnumerator.Current">
      <summary>
            Returns the current element of this enumerator.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.ObjectProvider">
      <summary>
             Visual Studio designer component that provides persistent objects.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectProvider.components">
      <summary>
            Required designer variable.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectProvider.parent_components">
      <summary>
      </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectProvider.objectContext">
      <summary>
      </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectProvider.masterOP">
      <summary>in case of sharing the objectscope, the one who is responsible for the transaction</summary>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectProvider.#ctor(System.ComponentModel.IContainer)">
      <overloads>Constructs a new instance.</overloads>
      <summary>
            Constructs a new instance in the parent container.
            </summary>
      <param name="container">Parent container</param>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectProvider.#ctor">
      <summary>
            Constructs a new instance.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectProvider.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
      <param name="disposing">Rollback transaction if <c>true</c>, otherwise 
            do not perform Rollback.
            </param>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectProvider.InitializeComponent">
      <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectProvider.InitUseImplicitTransaction">
      <summary>
            Check if another ObjectProvider of this dialog shares the same ObjectContext.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectProvider.SetObjectContext(Telerik.OpenAccess.IObjectContext)">
      <summary>
            Sets a specific instance of an IObjectContext to be used.
            </summary>
      <param name="context">An explicit ObjectContext</param>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectProvider.SaveAll">
      <summary>
            Saves all changes in general into the database.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectProvider.CancelAll">
      <summary>
            Reverts the changes since the last SaveAll.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectProvider.Refresh">
      <summary>
            Recalculates the result.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectProvider.GetService1(System.Type)">
      <summary>
            internal used method.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectProvider.System#ComponentModel#ISupportInitialize#BeginInit">
      <summary>
            Signals the object that initialization is starting. 
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectProvider.System#ComponentModel#ISupportInitialize#EndInit">
      <summary>
            Signals the object that initialization is complete.
            </summary>
    </member>
    <member name="E:Telerik.OpenAccess.ObjectProvider.Refreshed">
      <summary>
            Event handler for the Refreshed event triggered by a Refresh() method call.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectProvider.ObjectContext">
      <summary>
            Controls the used IObjectContext instance
            </summary>
      <value>The IObjectContext used by this ObjectProvider instance.</value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectProvider.ObjectContextProviderTypeName">
      <summary>Controls the type name of a class that implements the IObjectContextProvider interface
            </summary>
      <value>The type name</value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectProvider.HelperTypeName">
      <summary>Obsolete</summary>
      <value>Obsolete</value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectProvider.UsePrivateObjectContext">
      <summary>Controls if a private or sharable IObjectContext will be get from 
            the ObjectContextProvider as specified in 'ObjectContextProviderTypeName'.
            </summary>
      <value>
        <c>true</c> changes are not visible by other until they are saved.
            <c>false</c> changes are visible by other that uses the same IObjectContext.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectProvider.BaseType">
      <summary>Controls the type of the persistent objects in the result.
            </summary>
      <value>
            The base type; must be [Persistent].
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectProvider.ResultMethod">
      <summary>
            Controls how the ObjectProvider gets the result.
            </summary>
      <value>
            A ResultMethodType value.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectProvider.OQLStatement">
      <summary>
            Controls the OQL select statement used to filter/query the objects.
            </summary>
      <value>The OQL query string</value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectProvider.RequestName">
      <summary>
            Controls the name of a webmethod that provide container data.
            </summary>
      <value>The full name of the webmethod</value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectProvider.ResultName">
      <summary>
            Controls the name for the result to identify it.
            </summary>
      <value>Name of the result set.</value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectProvider.FetchGroup">
      <summary>
            Controls which fetch group will be used while getting the result
            or filling the ObjectContainer.
            </summary>
      <value>Name of the fetch group.</value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectProvider.PrefetchValue">
      <summary>
            Controls the number of objects that should be prefetched.
            </summary>
      <value>
            The number of objects to be prefetched; default is 30.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectProvider.ObjectSource">
      <summary>
            Set an object or collection of objects to be provided.
            </summary>
      <value>
            An object of a persistent capable class or
            an IEnumerable/IEnumerator containing these objects.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectProvider.Objects">
      <summary>
            Request the list with objects.
            </summary>
      <value>The list with requested objects.</value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectProvider.Context">
      <summary>
            Gets the used IObjectContext.
            </summary>
      <value>The used IObjectContext</value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectProvider.Tag">
      <summary>
            Gets or sets the object that contains data about the control.
            </summary>
      <value>
            An object that contains data about the control. The default is a null reference (Nothing in Visual Basic). 
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.ObjectProvider.ResultMethodType">
      <summary>
            Description of the result method of an ObjectProvider.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectProvider.ResultMethodType.Manual">
      <summary>Explicit result list used.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectProvider.ResultMethodType.Query">
      <summary>Query result controlled by 'ObjectProvider.OQLStatement' used.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectProvider.ResultMethodType.Request">
      <summary>A request that provides an ObjectContainer content.</summary>
    </member>
    <member name="T:Telerik.OpenAccess.ObjectState">
      <summary>
            Specifies the state of an object.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectState.Clean">
      <summary>
            Object was not modified
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectState.New">
      <summary>
            Object was marked as to be inserted
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectState.Dirty">
      <summary>
            Object was modified and needs to be updated
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectState.Removed">
      <summary>
            Object was marked as to be removed
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectState.Hollow">
      <summary>
            Object was not loaded yet; ObjectContainer: fields cannot be accessed; ObjectScope: fields are lazy loaded
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.ObjectView">
      <summary>
             A Visual Studio Designer component that allows binding of persistent
             objects to data bound controls.
             </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectView.#ctor">
      <summary>
            Constructs a new view without specifying a collection.
            This constructor is used by the Visual Studio .NET designer
            when dragging the ObjectView as component to a Windows Form.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectView.#ctor(System.ComponentModel.IContainer)">
      <summary>
            Constructs a new view without specifying a collection.
            This constructor is used by the Visual Studio .NET designer
            when dragging the ObjectView as component to a Windows Form.
            </summary>
      <param name="container">The container to use.</param>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectView.#ctor(Telerik.OpenAccess.IObjectContext,System.Collections.IList,System.Type)">
      <summary>
            Constructs a new view for the passed list, for example an IQueryResult.
            </summary>
      <param name="context">IObjectContext to use.</param>
      <param name="list">Any list with 'persistent objects'.</param>
      <param name="basetype">Base type of the objects in the list.</param>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectView.#ctor(Telerik.OpenAccess.IObjectContext,System.Collections.IEnumerable,System.Type)">
      <summary>
            Constructs a new view for the objects contained in the IEnumerable.
            </summary>
      <param name="context">IObjectContext to use.</param>
      <param name="list">
            The IEnumerable that contains the objects to be viewed.
            </param>
      <param name="type">
            The Type that should be assumed for the objects to be viewed.
            </param>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectView.#ctor(Telerik.OpenAccess.IObjectContext,System.Object,System.Type)">
      <summary>
            Constructs a new view for the passed persistent object.
            </summary>
      <param name="context">IObjectContext to use for add/remove.</param>
      <param name="persistentObject">The object to be viewed.</param>
      <param name="basetype">Base type of the objects in the list.</param>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectView.Dispose(System.Boolean)">
      <summary> 
            Cleans up any resources being used.
            </summary>
      <param name="disposing">Transactions might be rolled back if <c>true</c> is passed.</param>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectView.GetRootType">
      <summary>
            Gets the name of the RootType.
            </summary>
      <returns>
            FullName of the RootType
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectView.SetRootType(System.String)">
      <summary>
            Sets the RootType.
            </summary>
      <param name="fullClassName">The System.Type.FullName of the persistent root type.</param>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectView.SetObjectSource(Telerik.OpenAccess.IObjectContext,System.Collections.IList)">
      <summary>
            Set a collection of objects to be viewed.
            </summary>
      <param name="context">If not null, Add/Remove will also add/remove the object from the context.</param>
      <param name="list">Any list with objects of type 'RootType' or derived.</param>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectView.SetObjectSource(Telerik.OpenAccess.IObjectContext,System.Collections.IEnumerable)">
      <summary>
            Set a collection of objects to be viewed.
            Constructs a new view for the objects contained in the IEnumerable.
            </summary>
      <param name="context">If not null, Add/Remove will also add/remove the object from the context.</param>
      <param name="list">
            The IEnumerable that contains the objects to be viewed.
            </param>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectView.SetObjectSource(Telerik.OpenAccess.IObjectContext,System.Object)">
      <summary>
            Set an object or collection of objects to be viewed.
            Constructs a new view for the passed list, for example an IQueryResult.
            </summary>
      <param name="context">If not null, Add/Remove will also add/remove the object from the context.</param>
      <param name="anObject">The object to be viewed of type 'RootType' or derived.</param>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectView.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary>
            Returns the PropertyDescriptorCollection that represents 
            the properties on each item used to bind data.
            </summary>
      <param name="listAccessors">
             An array of System.ComponentModel.PropertyDescriptor objects 
             to find in the collection as bindable. This can be null .
            </param>
      <returns>
            The System.ComponentModel.PropertyDescriptorCollection 
            that represents the properties on each item used to bind data.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectView.GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary>
            Returns the name of the list.
            </summary>
      <param name="listAccessors">
            An array of System.ComponentModel.PropertyDescriptor objects, 
            the list name for which is returned. This can be null .
            </param>
      <returns>Name of the list.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectView.RemoveAt(System.Int32)">
      <summary>
            Removes the persistent object at the specified position.
            </summary>
      <param name="index">Zero-based position.</param>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectView.Insert(System.Int32,System.Object)">
      <summary>
            Inserts the persistent object at the specified position.
            </summary>
      <param name="index">Zero-based position.</param>
      <param name="persistentObject">The object to be inserted.</param>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectView.Remove(System.Object)">
      <summary>
            Removes the persistent object from the ObjectView.
            </summary>
      <param name="persistentObject">The object to be removed.</param>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectView.Contains(System.Object)">
      <summary>
            Indicates whether the specified object is contained in this
            ObjectView.
            </summary>
      <param name="persistentObject">The object to find.</param>
      <returns>
        <c>true</c> if object was found, <c>false</c>
            otherwise.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectView.Clear">
      <summary>
            Clears the ObjectView, removing all persistent objects from the list.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectView.IndexOf(System.Object)">
      <summary>
            Returns the numerical position of a persistent object 
            within the ObjectView.
            </summary>
      <param name="persistentObject">The object to find.</param>
      <returns>Numerical position, zero-based.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectView.Add(System.Object)">
      <summary>
            Adds an object of a persistence-capable class to the
            ObjectView.
            </summary>
      <param name="persistentObject">The object to add.</param>
      <returns>The numerical position of the added object in this
            ObjectView (zero-based).</returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectView.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the persistent objects of this ObjectView to a 
            one-dimensional Array instance at the specified index.
            </summary>
      <param name="array">The target array.</param>
      <param name="index">The zero-based index in 
            <paramref name="array" /> at which the copy operation begins.</param>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectView.GetEnumerator">
      <summary>Return an enumerator for the ObjectView.</summary>
      <returns>New enumerator instance.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectView.AddNew">
      <summary>
            Adds a new item to the list.
            </summary>
      <returns>
            Newly inserted object.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectView.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>
            This method is not supported.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectView.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>
            This method is not supported.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectView.RemoveSort">
      <summary>
            This method is not supported.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectView.PerformRefresh(System.Object,System.EventArgs)">
      <summary>Called on Refresh events</summary>
      <param name="sender">The sender of the event.</param>
      <param name="args">The event args.</param>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectView.RootType">
      <summary>
            Controls the root type of this ObjectView.
            </summary>
      <value>
            The root type of the objects in this view.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectView.DataSource">
      <summary>Sets the data source that the ObjectView binds to.</summary>
      <value>
            A single persistent object or a query result or a list of objects or 
            objects retrieved from an ObjectProvider or an enumerable. 
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectView.ObjectProvider">
      <summary>
            Controls the ObjectProvider that delivers the objects to be viewed.
            </summary>
      <value>
            The currently used provider for persistent objects.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectView.AllowUpdates">
      <summary>
            Controls if a control like a grid will allow editing of cells.
            </summary>
      <value>
        <c>true</c> when updates are allowed.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectView.PersistenceBehavior">
      <summary>
            Controls if new objects will also be marked for adding to the context
            or marked for deletion from the context.
            </summary>
      <value>
            Context action controlling value.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectView.AllowListChanges">
      <summary>
            Controls if a control like a grid will allow add/remove of rows.
            </summary>
      <value>
        <c>true</c> when list changes are allowed.</value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectView.IsReadOnly">
      <summary>
            Gets whether this ObjectView is read-only.
            </summary>
      <value>
        <c>true</c> if permitted access is read-only.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectView.Item(System.Int32)">
      <summary>
            Gets the object associated at the specified position. 
            </summary>
      <value>Object at position <paramref name="index" /></value>
      <param name="index">The numerical position (zero-based).</param>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectView.IsFixedSize">
      <summary>
            Indicates whether the ObjectView has a fixed size.
            </summary>
      <value>
        <c>true</c> if the object view is of fixed size.</value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectView.IsSynchronized">
      <summary>
            Indicates whether access to the ObjectView 
            is synchronized (thread-safe).
            </summary>
      <value>
        <c>true</c> if access is thread-safe, usually <c>false</c>.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectView.Count">
      <summary>
            Gets the number of objects in this ObjectView.
            </summary>
      <value>Number of objects in this object view.</value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectView.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access.
            </summary>
      <value>An object that can be used to synchronize access this
            collection.</value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectView.AllowEdit">
      <summary>Indicates whether modifications are allowed.</summary>
      <value>Modification is allowed.</value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectView.AllowNew">
      <summary>
            Indicates whether you can add items. 
            </summary>
      <value>True, if new items can be added</value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectView.AllowRemove">
      <summary>
            Indicates whether you can remove items. 
            </summary>
      <value>True, if items can be removed</value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectView.SupportsChangeNotification">
      <summary>
            Indicates whether a ListChanged event is raised when the list changes or 
            an item in the list changes; is always true.
            </summary>
      <value>True</value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectView.SupportsSearching">
      <summary>
            Indicates whether the list supports searching; is always false.
            </summary>
      <value>False</value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectView.SupportsSorting">
      <summary>
            Indicates whether the items are sorted; is always false.
            </summary>
      <value>False</value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectView.IsSorted">
      <summary>
            This property is not supported.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectView.SortDirection">
      <summary>
            This property is not supported.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectView.SortProperty">
      <summary>
            This property is not supported.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectView.TxnAllowsModification">
      <summary>Gets the currency manager instance.</summary>
      <value>The associated currency manager instance.</value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectView.Modifiable">
      <summary>
            Indicates whether the underlying context allows modification or not.
            </summary>
      <value>
        <c>true</c> if the ObjectView allows modifications.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectView.GenerateIEditableObjectWrapperForNewObjects">
      <summary>
            Indicates whether the EditableObject wrapper will be generated or not.
            </summary>
      <value>
        <c>false</c> if the ObjectView should generate wrapper.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectView.StarRowSupport">
      <summary>
            Generate new objects with an IEditableObject wrapper
            </summary>
      <value>
            If set to <c>true</c> new objects are wrapped with an IEditableObject 
             wrapper; <c>false</c> will give out the unwrapped object.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectView.SuppressEditableObjectWrapper">
      <summary>
            This property is Obsolete. Use StarRowSupport instead. Attention, the logic is inverted!
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectView.ReferencesAsCollections">
      <summary>
            Provide all references as collections to the UI elements.
            </summary>
      <value>
             If set to <c>true</c> references are presented as a collection to the UI elements. 
             <c>false</c> will give out the normal reference.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectView.Tag">
      <summary>
            Gets or sets the object that contains data about the control.
            </summary>
      <value>
            An object that contains data about the control. The default is a null reference (Nothing in Visual Basic). 
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.ObjectView.PersistenceBehaviorValues">
      <summary>
            Specification of the behavior while adding new or deleting objects from the ObjectView.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectView.PersistenceBehaviorValues.none">
      <summary>
            Adding or Removing only affects the list but not the database.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectView.PersistenceBehaviorValues.markForAdd">
      <summary>
            Added new objects will be marked for adding to the database.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectView.PersistenceBehaviorValues.markForDelete">
      <summary>
            Removed objects will be marked for deletion from the database.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectView.PersistenceBehaviorValues.markForAddAndDelete">
      <summary>
            Added new objects will be marked for adding and
            removed objects will be marked for deletion from the database.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.OIDHelper">
      <summary>
            Helper class for database object identity processing.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.OIDHelper.FromString(System.String)">
      <summary>
            Creates a new database object identifier from an externalized form.
            </summary>
      <exception cref="T:System.ArgumentNullException">No external string representation given.</exception>
      <exception cref="T:Telerik.OpenAccess.OpenAccessException">The external string representation could not be parsed.</exception>
      <param name="externalizedForm">String representation of a database object id.</param>
      <returns>New IObjectId instance.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.OIDHelper.ToString(Telerik.OpenAccess.IObjectId)">
      <summary>
            Creates the externalized representation of a database object identity.
            </summary>
      <exception cref="T:System.ArgumentNullException">No oid instance given.</exception>
      <param name="oid">Database object identifier.</param>
      <returns>Externalized form for the <paramref name="oid" />.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.OIDHelper.ParseObjectId(System.Type,System.String)">
      <summary>
             Creates database object identifiers by parsing a string representation for a given type.
             </summary>
      <param name="oidstr">
             Database object ID in string form.
             </param>
      <param name="t">
             The type of the object with the specified id. For internal identity,
             null can be specified.
             </param>
      <returns>
             New database object identifier.
             </returns>
    </member>
    <member name="M:Telerik.OpenAccess.OIDHelper.GetObjectId(System.Object)">
      <summary>
             Returns the object identity for the passed object.
             </summary>
      <returns>New database object identifier or <c>null</c> when internal identity is used and
             the persistence capable instance is not in managing context.</returns>
      <param name="persistenceCapable">The enhanced object.</param>
      <exception cref="T:System.ArgumentNullException">No instance given.</exception>
      <exception cref="T:Telerik.OpenAccess.OpenAccessException">No persistence capable instance given.</exception>
    </member>
    <member name="T:Telerik.OpenAccess.Query`1">
      <summary>
            Class for executing queries.
            </summary>
      <typeparam name="T">Return type of the executed query.
             </typeparam>
    </member>
    <member name="M:Telerik.OpenAccess.Query`1.#ctor(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.IQuery)">
      <summary>
            For internal use only.
            </summary>
      <param name="scope">The <see cref="T:Telerik.OpenAccess.IObjectScope">IObjectScope</see> object.</param>
      <param name="query">The <see cref="T:Telerik.OpenAccess.IQuery" />IQuery object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Query`1.ExecuteBindingList">
      <overloads>Executes the specified query and returns the result.</overloads>
      <summary>
            Executes the specified query and returns the result as 
             QueryResultBindingList&lt;T&gt;.
            This method can only be used for queries without parameters.
            </summary>
      <returns>The result of the query execution.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Query`1.ExecuteBindingList(System.Object[])">
      <overloads>Executes the specified query and returns the result.</overloads>
      <summary>
            Executes the specified query using the paramaters passed
            and returns the result as QueryResultBindingList.
            </summary>
      <param name="parameters">The query parameters to use.</param>
      <returns>The result of the
             query execution.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Query`1.ExecuteList">
      <overloads>Executes the specified query and returns the result.</overloads>
      <summary>
            Executes the specified query and returns the result as 
             QueryResultList&lt;T&gt;.
            This method can only be used for queries without parameters.
            </summary>
      <returns>The result of the query execution.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Query`1.ExecuteList(System.Object[])">
      <overloads>Executes the specified query and returns the result.</overloads>
      <summary>
            Executes the specified query and returns the result as 
             QueryResultList&lt;T&gt;.
            This method can only be used for queries without parameters.
            </summary>
      <param name="parameters">The query parameters to use.</param>
      <returns>The result of the query execution.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Query`1.ExecuteEnumerable">
      <summary>
            Executes the specified query and returns the result.
            This method can only be used for queries without parameters.
            </summary>
      <returns>The result of the query execution.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Query`1.ExecuteEnumerable(System.Object[])">
      <summary>
            Executes the specified query using the paramaters passed
            and returns the result.
            </summary>
      <param name="parameters">The query parameters to use.</param>
      <returns>The result of the
             query execution.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Query`1.ExecuteDirect">
      <summary>
            Executes the specified query and returns no result.
            This method can only be used for queries without parameters.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Query`1.ExecuteDirect(System.Object[])">
      <summary>
            Executes the specified query using the paramaters passed
            and returns no result.
            </summary>
      <param name="parameters">The query parameters to use.</param>
      <returns>The result of the
             query execution.</returns>
    </member>
    <member name="P:Telerik.OpenAccess.Query`1.IgnoreUncommitted">
      <summary>
            This property determines whether the query execution is allowed 
            to ignore the changes made in the current transaction, e.g. 
            return objects which have been deleted in the current transaction.
            </summary>
      <value>True (default), if uncommitted changes can be ignored.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.Query`1.Skip">
      <summary>
            Controls the amount of data which is to be skipped before results are fetched.
            </summary>
      <value>Amount of data to skip. (Default:0)</value>
    </member>
    <member name="P:Telerik.OpenAccess.Query`1.MaxResultCount">
      <summary>
            Limits the maximum number of instances to return.
            </summary>
      <value>The maximum number of instances to return by query execution.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.Query`1.ParallelFetch">
      <summary>
            Controls whether parallel result fetching is allowed.
            </summary>
      <value>
        <c>True</c> when parallel result fetching is allowed, <c>false</c> (default) otherwise.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.Query`1.Prefetch">
      <summary>
            Applies prefetch settings to the uncompiled query.
            </summary>
      <value>The prefetch value to be used.
            </value>
      <returns>The query with applied prefetch settings.</returns>
      <exception cref="T:System.InvalidOperationException">Query result has
            already been calculated.</exception>
    </member>
    <member name="P:Telerik.OpenAccess.Query`1.BackendQuery">
      <summary>
            Gets the generated backend query expression (e.g. SQL).
            </summary>
      <value>The native query expression.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.Query`1.Expression">
      <summary>
            Provides the query expression from which this query was created.
            </summary>
      <value>The query expression.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.Query`1.Context">
      <summary>
            Provides the context (IObjectScope) of the query.
            </summary>
      <value>The context (<see cref="T:Telerik.OpenAccess.IObjectScope">IObjectScope</see>)
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.QueryResultBindingList`1">
      <summary>
            Typed result of a database query execution.
            </summary>
      <typeparam name="T">The result type of the query.</typeparam>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultBindingList`1.AddNewCore">
      <summary>
            Adds a new item to the end of the collection.
            </summary>
      <returns>The item that was added to the collection.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultBindingList`1.ClearItems">
      <summary>
            Removes all elements from the collection.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultBindingList`1.RemoveItem(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultBindingList`1.InsertItem(System.Int32,`0)">
      <summary>
            Inserts the specified item in the list at the specified index.
            </summary>
      <param name="index">The zero-based index where the item is to be inserted.</param>
      <param name="item">The item to insert in the list.</param>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultBindingList`1.SetItem(System.Int32,`0)">
      <summary>
            Replaces the item at the specified index with the specified item.
            </summary>
      <param name="index">The zero-based index of the item to replace.</param>
      <param name="item">The new value for the item at the specified index. 
            The value can be null for reference types.</param>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultBindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>
            Sorts the items.
            </summary>
      <param name="property">
            A  <see cref="T:System.ComponentModel.PropertyDescriptor">System.ComponentModel.PropertyDescriptor</see> 
            that specifies the property to sort on.
            </param>
      <param name="direction">
            One of the <see cref="T:System.ComponentModel.ListSortDirection">System.ComponentModel.ListSortDirection</see> values.
            </param>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultBindingList`1.RemoveSortCore">
      <summary>
            Removes any sort applied.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.QueryResultBindingList`1.DeleteBehaviour">
      <summary>
            Defines how remove on a list should be handled with regards to the database.
            </summary>
      <value>The value if the list remove operations should delete the database data.</value>
    </member>
    <member name="P:Telerik.OpenAccess.QueryResultBindingList`1.AddBehaviour">
      <summary>
            Defines how add on a list should be handled with regards to the database.
            </summary>
      <value>The value if the list add operations should insert the data into the database.</value>
    </member>
    <member name="P:Telerik.OpenAccess.QueryResultBindingList`1.SupportsSortingCore">
      <summary>
            Gets a value indicating whether the list supports sorting. This will return true;
            </summary>
      <value>The value indicating whether the list supports sorting.</value>
    </member>
    <member name="P:Telerik.OpenAccess.QueryResultBindingList`1.IsSortedCore">
      <summary>
            Gets a value indicating whether the list is sorted.
            </summary>
      <value>The value indicating whether the list is sorted.</value>
    </member>
    <member name="P:Telerik.OpenAccess.QueryResultBindingList`1.SortDirectionCore">
      <summary>
            Gets the direction the list is sorted.
            </summary>
      <value>The direction the list is sorted.</value>
    </member>
    <member name="P:Telerik.OpenAccess.QueryResultBindingList`1.SortPropertyCore">
      <summary>
            Gets the property descriptor that is used for sorting the list.
            </summary>
      <value>The property descriptor that is used for sorting the list.</value>
    </member>
    <member name="P:Telerik.OpenAccess.QueryResultBindingList`1.Context">
      <summary>
            Provides the context (IObjectScope) of the query.
            </summary>
      <value>The context (<see cref="T:Telerik.OpenAccess.IObjectScope">IObjectScope</see>)
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.QueryResultEnumerable`1">
      <summary>
            Result of a database query execution.
            The result has to be disposed. 
            </summary>
      <typeparam name="T">The result type of the query.</typeparam>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultEnumerable`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1">
            System.Collections.Generic.IEnumerator&lt;T&gt;</see> 
            that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator">System.Collections.IEnumerator</see>   
            object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultEnumerable`1.GetTotalCount">
      <summary>
            Obtains the total number of results in a paging-independend fashion.
            </summary>
      <returns>The total number of results.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultEnumerable`1.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, 
            or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultEnumerable`1.ToList">
      <summary>
            Resolves the complete result and adds it to a real List
            </summary>
      <returns>Generic List with the complete fetched result.</returns>
    </member>
    <member name="P:Telerik.OpenAccess.QueryResultEnumerable`1.Context">
      <summary>
            Provides the context (IObjectScope) of the query.
            </summary>
      <value>The context (<see cref="T:Telerik.OpenAccess.IObjectScope">IObjectScope</see>)
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.QueryResultList`1">
      <summary>
            Result of a database query execution.
            </summary>
      <typeparam name="T">The result type of the query.</typeparam>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.IndexOf(`0)">
      <summary>
            Determines the index of a specific item in the 
            list.
            </summary>
      <param name="item">The object to locate in the 
            <see cref="T:System.Collections.Generic.IList`1">System.Collections.Generic.IList&lt;T&gt;</see></param>
      <returns>The index of item if found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.Insert(System.Int32,`0)">
      <summary>
            Inserts an item at the specified index.
            </summary>
      <param name="index">The zero-based index at which item should be inserted.</param>
      <param name="item">The object to insert.</param>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.Add(`0)">
      <summary>
            Adds an item to the List.
            </summary>
      <param name="item">The object to add to the List.</param>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.Clear">
      <summary>
            Removes all items from the List.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.Contains(`0)">
      <summary>
             Determines whether the List contains a specific value.
            </summary>
      <param name="item">The object to locate in the List.</param>
      <returns>true if item is found in the List otherwise, false.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.CopyTo(`0[],System.Int32)">
      <summary>
            Copies the elements of the List to an 
            System.Array, starting at a particular System.Array index.
            </summary>
      <param name="array">
            The one-dimensional System.Array that is the destination of the elements
            copied from List. The System.Array must have zero-based indexing.
            </param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.Remove(`0)">
      <summary>
            Removes the first occurrence of a specific object from the List.
            </summary>
      <param name="item">
            The object to remove from the List.
            </param>
      <returns>
            true if item was successfully removed from the List
            otherwise, false. This method also returns false if item is not found in
            the original List.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1">
            System.Collections.Generic.IEnumerator&lt;T&gt;</see> 
            that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator">System.Collections.IEnumerator</see>   
            object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.GetTotalCount">
      <summary>
            Obtains the total number of results in a paging-independend fashion.
            </summary>
      <returns>The total number of results.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.Add(System.Object)">
      <summary>
            Adds an item to the list.
            </summary>
      <param name="value">The object to add to the list.</param>
      <returns>The position into which the new element was inserted.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.Contains(System.Object)">
      <summary>
            Determines whether the list contains a specific value.
            </summary>
      <param name="value">The object to locate in the list.</param>
      <returns>true if the System.Object is found in the System.Collections.IList; otherwise, false.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.IndexOf(System.Object)">
      <summary>
            Determines the index of a specific item in the list.
            </summary>
      <param name="value">The object to locate in the list.</param>
      <returns>The index of value if found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.Insert(System.Int32,System.Object)">
      <summary>
            Inserts an item to the list at the specified index.
            </summary>
      <param name="index">The zero-based index at which value should be inserted.</param>
      <param name="value">The object to insert into the list.</param>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.Remove(System.Object)">
      <summary>
            Removes the first occurrence of a specific object from the list.
            </summary>
      <param name="value">The object to remove from the list.</param>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the elements of the list to an array, starting at a particular array index.
            </summary>
      <param name="array">
            The one-dimensional array that is the destination of the elements 
            copied from list. The array must have zero-based 
            indexing.
            </param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, 
            or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.ToList">
      <summary>
            Resolves the complete result and adds it to a real List
            </summary>
      <returns>Generic List with the complete fetched result.</returns>
    </member>
    <member name="P:Telerik.OpenAccess.QueryResultList`1.OutParameter">
      <summary>
            Returns a dictionary containing the stored procedure out parameter values.
            </summary>
      <value>
            Dictionary of out parameter values by name.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.QueryResultList`1.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <value>The element at the specified index.</value>
    </member>
    <member name="P:Telerik.OpenAccess.QueryResultList`1.Count">
      <summary>
            Gets the number of elements contained in the List.
            </summary>
      <value>The number of elements contained in the List.</value>
    </member>
    <member name="P:Telerik.OpenAccess.QueryResultList`1.IsReadOnly">
      <summary>
            Gets a value indicating whether the List is read-only.
            </summary>
      <value>Value indicating whether the List is read-only.</value>
    </member>
    <member name="P:Telerik.OpenAccess.QueryResultList`1.Context">
      <summary>
            Provides the context (IObjectScope) of the query.
            </summary>
      <value>The context (<see cref="T:Telerik.OpenAccess.IObjectScope">IObjectScope</see>)
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.QueryResultList`1.IsFixedSize">
      <summary>
            Gets a value indicating whether the list has a fixed size.
            </summary>
      <value>true if list has fixed size; otherwise, false. </value>
    </member>
    <member name="P:Telerik.OpenAccess.QueryResultList`1.System#Collections#IList#Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <value>The element at the specified index.</value>
    </member>
    <member name="P:Telerik.OpenAccess.QueryResultList`1.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the list 
            is synchronized (thread safe).
            </summary>
      <value>
            true if access to the list is synchronized (thread safe); otherwise, false.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.QueryResultList`1.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the list.
            </summary>
      <value>
            An object that can be used to synchronize access to the list.
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.TrackedBindingList`1">
      <summary>
            Base implementation of a generic binding list which tracks modifications.
            </summary>
      <typeparam name="T">The type of the elements in the list</typeparam>
    </member>
    <member name="M:Telerik.OpenAccess.TrackedBindingList`1.#ctor">
      <summary>
            Constructor generating new, empty and tracked BindingList.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.TrackedBindingList`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>
            Constructor generating new, tracked BindingList over the list given.
            </summary>
      <param name="src">List with existing values</param>
      <exception cref="T:System.ArgumentNullException">src is <c>null</c></exception>
    </member>
    <member name="M:Telerik.OpenAccess.TrackedBindingList`1.GetOwner">
      <summary>
            Gets the owner instance of this list.
            </summary>
      <returns>Owner instance or <c>null</c> when no change tracking is performed.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.TrackedBindingList`1.GetFieldName">
      <summary>
            Gets the field name of the owning instance where this list is referenced.
            </summary>
      <returns>Field name of the owning instance.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.TrackedBindingList`1.PostLoad">
      <summary>
            Override this function to get a notification after collection load.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.TrackedBindingList`1.Equals(System.Object)">
      <summary>
            Compares for content equality including ordering.
            </summary>
      <param name="obj">Another TrackedBindingList instance for type <typeparamref name="T" /></param>
      <returns>True when content and order are equal</returns>
    </member>
    <member name="M:Telerik.OpenAccess.TrackedBindingList`1.GetHashCode">
      <summary>
            Calculates a hash code for this instance.
            </summary>
      <returns>Hash code</returns>
    </member>
    <member name="T:Telerik.OpenAccess.TrackedList`1">
      <summary>
            Base implementation of a tracked list.
            </summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
    </member>
    <member name="M:Telerik.OpenAccess.TrackedList`1.#ctor">
      <summary>
            Creates a new empty and tracked list.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.TrackedList`1.#ctor(System.Int32)">
      <summary>
            Creates a new tracked list of the specified size.
            </summary>
      <param name="count">Number of elements to reserve space for.</param>
    </member>
    <member name="M:Telerik.OpenAccess.TrackedList`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>
            Creates a new tracked list with the given content.
            </summary>
      <param name="src">List instance to make tracked.</param>
      <exception cref="T:System.ArgumentNullException">src is <c>null</c></exception>
    </member>
    <member name="M:Telerik.OpenAccess.TrackedList`1.GetOwner">
      <summary>
            Gets the owner instance of this list.
            </summary>
      <returns>Owner instance or <c>null</c> when no change tracking is performed.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.TrackedList`1.GetFieldName">
      <summary>
            Gets the field name of the owning instance where this list is referenced.
            </summary>
      <returns>Field name of the owning instance.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.TrackedList`1.PostLoad">
      <summary>
            Override this function to get a notification after collection load.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.TrackedList`1.Equals(System.Object)">
      <summary>
            Compares for content equality including ordering.
            </summary>
      <param name="obj">Another TrackedList instance for type <typeparamref name="T" /></param>
      <returns>True when content and order are equal</returns>
    </member>
    <member name="M:Telerik.OpenAccess.TrackedList`1.GetHashCode">
      <summary>
            Calculates a hash code for this instance.
            </summary>
      <returns>Hash code</returns>
    </member>
    <member name="T:Telerik.OpenAccess.TransactionMode">
      <summary>
            Specification of the concurrency control for a transaction.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.TransactionMode.OPTIMISTIC_NO_LOST_UPDATES">
      <summary>
            Commit will verify that modified objects have not been
            updated by another transaction meanwhile.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.TransactionMode.PESSIMISTIC_EXPLICIT">
      <summary>
            Write locks have to be set explicitely by ITransaction.Lock().
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.TransactionMode.PESSIMISTIC_WRITE_LOCK_WHEN_FETCHED">
      <summary>
            Objects are write-locked when fetched from the datastore.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.TransactionProvider">
      <summary>
             Specifies how transactions are provided.
             </summary>
    </member>
    <member name="F:Telerik.OpenAccess.TransactionProvider.OpenAccess">
      <summary>
            Use built-in transactions provided by Telerik.OpenAccess.
            This is the default setting.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.TransactionProvider.TransactionScope">
      <summary>
            Use the implicit transactional programming model (TransactionScope).
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.TransactionProvider.Explicit">
      <summary>
            Use the explicit transactional programming model.
            </summary>
    </member>
  </members>
</doc>